@model RIC.Models.Client.ClientReportView

@{
    ViewBag.Title = "ClientReport";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}


<script src="https://cdn.rawgit.com/rainabba/jquery-table2excel/1.1.0/dist/jquery.table2excel.min.js"></script>





<style>
    .ui-autocomplete {
        overflow-y: scroll;
        overflow-x: hidden;
        max-height: 150px;
    }

    .btn-toolbar .btn, .btn-toolbar .btn-group, .btn-toolbar .input-group {
        float: right;
        background-color: #337ab7;
        color: white;
        margin-top: -3%;
    }

    .textCapitalize
    {
        text-transform: capitalize;
    }
   

</style>

<legend>Client Report</legend>
@using (Html.BeginForm())
{ 
      <input id="GetDates" type="hidden" name="GetDates" />
     <input type='hidden' value='@ViewBag.Empcd' id='empCd' name="empCd" />
    
    <div class="container ">
        <div class="row">
            <div class="col-sm-12">
                <div class="panel panel-primary DivBorder">
                    <div class="panel-heading DivBorder panelHead">Search Criteria</div>
                    <div class="panel-body">
                        <div class="form-row tblPading" style="margin-left: 3%;">

                            <div class="form-group col-md-12">
                                <div class="col-md-6">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Year, new { @class = "form" })
                                </div>
                                <div class=" col-md-6">
                                    @Html.DropDownListFor(model => model.GetYear, Model.YearSelectList,new { @id = "ddlyear", @class = "form-control" })
                                </div>
                                    </div>
                              <div class="col-md-6">
                           
                                <div class=" col-md-3">
                                    @Html.LabelFor(model => model.Client, new { @class = "form" })
                                </div>
                                <div class=" col-md-6">
                                    @Html.DropDownListFor(model => model.ClientSelected, Model.ClientList, new { @class = "form-control",@title="All", @id="ddlClient"})
                                    @*   @Html.TextBoxFor(model => model.ClientList, new { @id="txtclient" ,@type = "text", @class = "form-control input-sm",@style="width: 173%;"})*@
                                </div>

                              </div>

                            </div>
                            <div class="form-group col-md-12">
                                 <div class="col-md-6">
                                <div class=" col-md-3">
                                    <label for="inputEmail4">From Date</label>
                                </div>
                                <div class=" col-md-6">
                                    @Html.TextBoxFor(model => model.FromDate, "{0:MM-dd-yyyy}", new { placeholder = "MM-DD-YYYY", disabled="@Disabled",@class = "form-control input-sm chat-input input-group date", pattern = "(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d" })

                                </div>

                                 </div>
                                 <div class="col-md-6">
                                <div class=" col-md-3">
                                    <label for="inputEmail4">To Date</label>
                                </div>
                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.ToDate, "{0:MM-dd-yyyy}", new { placeholder = "MM-DD-YYYY", disabled="@Disabled",@class = "form-control input-sm chat-input input-group date", pattern = "(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d" })
                                </div>
                               </div>
                          </div>
                        </div>
                   
                        
                        <div  class="col-md-12" style="margin-top: 2%;">
                              <div class="form-group col-md-4">
                                <div class=" col-md-4">
                                    @Html.LabelFor(model => model.Submissions, new { @class = "form" })
                                </div>
                                <div class=" col-md-3">
                                    @Html.DropDownListFor(model => model.SubSelected, Model.SubmissionSelectList, new { @class = "form-control input-sm CandidateDdl" })
                                </div>
                                <div class=" col-md-5">
                                    @Html.TextBoxFor(model => model.Submissions, new { @type = "number", @class = "form-control input-sm", @min = "0" })
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.Interviews, new { @class = "form" })
                                </div>
                                <div class=" col-md-3">
                                    @Html.DropDownListFor(model => model.InterviewSelected, Model.InterviewsSelectList, new { @class = "form-control input-sm CandidateDdl" })

                                </div>
                                <div class="col-md-5">
                                    @Html.TextBoxFor(model => model.Interviews, new { @type = "number", @class = "form-control input-sm", @min = "0" })
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.Hires, new { @class = "form" })
                                </div>
                                <div class=" col-md-3">
                                    @Html.DropDownListFor(model => model.HireSelected, Model.HiresSelectList, new { @class = "form-control input-sm CandidateDdl" })

                                </div>
                                <div class="col-md-5">
                                    @Html.TextBoxFor(model => model.Hires, new { @type = "number", @class = "form-control input-sm", @min = "0" })
                                </div>
                            </div>
                        </div>
                        <div style="margin: auto; width: 25%; padding-left: 7%" class="form-group">
                            <div class="form-group col-md-6">
                                <input type="submit" class="btn btn-primary" value="Search" />
                            </div>
                            <div class="form-group col-md-6">
                                <input id="ResetBtn" type="reset" class="btn btn-danger" value="Clear" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    

if (ViewBag.ShowTable == true)
{ 
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <div class="panel panel-primary">
                    <div class="panel-heading panelHead">
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-4 ">
                                <span class="glyphicon glyphicon-list-alt" style="padding-top: 7px;"></span>Search Result  
                            </div>
                            <div class="col-xs-12 col-sm-12 col-md-4">
                                <div style="z-index: 0;" class="input-group">
                                    <input type="text" id="myInputTextField" class="form-control input-md" name="search">
                                    <div class="input-group-btn">
                                        <button type="button" class="btn btn-md btn-warning"><span class=" glyphicon glyphicon-search"></span></button>
                                  
                                          <input type="button" value="Export To Excel"  class="btn" style="margin-left: 228%;color:black" onclick="exportexcel()"/>
                               
                                    </div>
                                  
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body table-responsive">
                        
                        <table id="OperationalTable" class="table table-hover ">
                            <thead>
                                <tr>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().Client)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().EmpCd)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().EmployeeName)</th>

                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().Submissions)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().Interviews)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().Hires)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().SubByInterview)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().SubByHire)</th>
                                    <th>@Html.DisplayNameFor(m => m.FilterData.FirstOrDefault().InterviewByHire)</th>


                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.FilterData)
                                {         
                                    <tr>
                                        <td>@item.Client</td>
                                        <td>@item.EmpCd</td>
                                        <td class="textCapitalize">@item.EmployeeName</td>
                                        <td>@item.Submissions</td>
                                        <td>@item.Interviews</td>
                                        <td>@item.Hires</td>
                                        <td>@item.SubByInterview%</td>
                                        <td>@item.SubByHire%</td>
                                        <td>@item.InterviewByHire%</td>

                                    </tr>        
                                }
                            </tbody>
                        </table>                          
                    </div>
                </div>
            </div>
        </div>
    </div>
}
}




<script>

    $('#ResetBtn').click(function () {
        var jobRepartPartialUrl = '@Url.Action("ClientReport")';
        window.location.replace(jobRepartPartialUrl);
    });

    

    var $clientTable = $('#OperationalTable').DataTable({
        searching: false,
        "oLanguage": {
            "sEmptyTable": "No Records Found"
        }
    });

    $('#FromDate').datepicker({
        dateFormat: 'mm-dd-yy',
        icons: {
            time: "fa fa-clock-o",
            date: "fa fa-calendar",
            up: "fa fa-arrow-up",
            down: "fa fa-arrow-down"
        }
            ,
        onSelect: function (selected) {

            //var dt = new Date(selected.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3"));
            var dt = new Date(selected);
            dt.setDate(dt.getDate());
            $("#ToDate").datepicker("option", "minDate", dt);
        }
    });
    $('#ToDate').datepicker({
        dateFormat: 'mm-dd-yy',
        icons: {
            time: "fa fa-clock-o",
            date: "fa fa-calendar",
            up: "fa fa-arrow-up",
            down: "fa fa-arrow-down"
        },
        onSelect: function (selected) {
         //var dt = new Date(selected.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3"));
            var dt = new Date(selected);
            dt.setDate(dt.getDate() - 1);
            $("#FromDate").datepicker("option", "maxDate", dt);
        }
    });

    $(document).ready(function () {
        $("#txtclient").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("ClientList")',
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term.toUpperCase() },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.RC_ClientName, value: item.RC_ClientName };
                        }))
                    }
                    
                })
            }

        });

        $("#myInputTextField").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#OperationalTable tbody tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });


        $("#ddlyear").change(function () {

            if ($(this).val() == 0) {
                $("#FromDate,#ToDate").val("");
                $("#FromDate,#ToDate").prop("disabled", true);
            }
            else {
                $("#FromDate,#ToDate").prop("disabled", false);

            }
            return true;

        });
       
       

        if ($("#ddlyear option:selected").val() == 0) {
            $("#FromDate,#ToDate").val("");
            $("#FromDate,#ToDate").prop("disabled", true);
        }
        else

        {
            $("#FromDate,#ToDate").prop("disabled", false);
        }

            $("#ddlClient").change(function () {
                $(this).attr("title",$(this).val());
            }).change()


            $("Input[type=Submit]").click(function () {
    
            var $year = $("#ddlyear option:selected").val();
            var $getFromDate = $("#FromDate").val().trim();
            var $getToDate = $("#ToDate").val().trim();
            $("[id*=GetDates]").val($getFromDate + $getToDate);
        
            if ($year != "0" && $getFromDate != "" && $getToDate != "") {

                var fromdate = new Date($getFromDate).getFullYear();
                var todate = new Date($getToDate).getFullYear();
                if ($year != fromdate || $year != todate) {
                    alert("Enter Valid Dates");
                    return false;

                }
            }
            $("#FromDate,#ToDate").prop("disabled", false)
            return true;

        });

    });


    function exportexcel() {

        $clientTable.destroy();

        $("#OperationalTable").table2excel({
            name: "Table2Excel",
            filename: "Client Report",
            fileext: ".xls"
        });

        $clientTable = $('#OperationalTable').DataTable({
            searching: false,
            "oLanguage": {
                "sEmptyTable": "No Records Found"
            }
        });
    }

</script>




