//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace RIC.com.jobdiva.ws_API
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "JobDivaAPISOAP", Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class JobDivaAPI : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback searchCompanyOperationCompleted;

        private System.Threading.SendOrPostCallback createCompanyOperationCompleted;

        private System.Threading.SendOrPostCallback updateCompanyOperationCompleted;

        private System.Threading.SendOrPostCallback searchContactOperationCompleted;

        private System.Threading.SendOrPostCallback createContactOperationCompleted;

        private System.Threading.SendOrPostCallback updateContactOperationCompleted;

        private System.Threading.SendOrPostCallback createContactNoteOperationCompleted;

        private System.Threading.SendOrPostCallback searchJobOperationCompleted;

        private System.Threading.SendOrPostCallback createJobOperationCompleted;

        private System.Threading.SendOrPostCallback updateJobOperationCompleted;

        private System.Threading.SendOrPostCallback createJobNoteOperationCompleted;

        private System.Threading.SendOrPostCallback searchCandidateProfileOperationCompleted;

        private System.Threading.SendOrPostCallback createCandidateOperationCompleted;

        private System.Threading.SendOrPostCallback updateCandidateProfileOperationCompleted;

        private System.Threading.SendOrPostCallback updateCandidateUserfieldsOperationCompleted;

        private System.Threading.SendOrPostCallback updateCandidateQualificationsOperationCompleted;

        private System.Threading.SendOrPostCallback updateCandidateAvailabilityOperationCompleted;

        private System.Threading.SendOrPostCallback updateCandidateEmailMergeOperationCompleted;

        private System.Threading.SendOrPostCallback createCandidateNoteOperationCompleted;

        private System.Threading.SendOrPostCallback createCandidateReferenceOperationCompleted;

        private System.Threading.SendOrPostCallback searchStartOperationCompleted;

        private System.Threading.SendOrPostCallback updateStartOperationCompleted;

        private System.Threading.SendOrPostCallback saveTimeSheetOperationCompleted;

        private System.Threading.SendOrPostCallback createBillingRecordOperationCompleted;

        private System.Threading.SendOrPostCallback createPayRecordOperationCompleted;

        private System.Threading.SendOrPostCallback updateBillingRecordOperationCompleted;

        private System.Threading.SendOrPostCallback updatePayRecordOperationCompleted;

        private System.Threading.SendOrPostCallback uploadResumeOperationCompleted;

        private System.Threading.SendOrPostCallback createJobApplicationOperationCompleted;

        private System.Threading.SendOrPostCallback createSubmittalOperationCompleted;

        private System.Threading.SendOrPostCallback searchSubmittalOperationCompleted;

        private System.Threading.SendOrPostCallback updateSubmittalOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public JobDivaAPI()
        {
            this.Url = global::RIC.Properties.Settings.Default.RIC_com_jobdiva_ws_JobDivaAPI;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event searchCompanyCompletedEventHandler searchCompanyCompleted;

        /// <remarks/>
        public event createCompanyCompletedEventHandler createCompanyCompleted;

        /// <remarks/>
        public event updateCompanyCompletedEventHandler updateCompanyCompleted;

        /// <remarks/>
        public event searchContactCompletedEventHandler searchContactCompleted;

        /// <remarks/>
        public event createContactCompletedEventHandler createContactCompleted;

        /// <remarks/>
        public event updateContactCompletedEventHandler updateContactCompleted;

        /// <remarks/>
        public event createContactNoteCompletedEventHandler createContactNoteCompleted;

        /// <remarks/>
        public event searchJobCompletedEventHandler searchJobCompleted;

        /// <remarks/>
        public event createJobCompletedEventHandler createJobCompleted;

        /// <remarks/>
        public event updateJobCompletedEventHandler updateJobCompleted;

        /// <remarks/>
        public event createJobNoteCompletedEventHandler createJobNoteCompleted;

        /// <remarks/>
        public event searchCandidateProfileCompletedEventHandler searchCandidateProfileCompleted;

        /// <remarks/>
        public event createCandidateCompletedEventHandler createCandidateCompleted;

        /// <remarks/>
        public event updateCandidateProfileCompletedEventHandler updateCandidateProfileCompleted;

        /// <remarks/>
        public event updateCandidateUserfieldsCompletedEventHandler updateCandidateUserfieldsCompleted;

        /// <remarks/>
        public event updateCandidateQualificationsCompletedEventHandler updateCandidateQualificationsCompleted;

        /// <remarks/>
        public event updateCandidateAvailabilityCompletedEventHandler updateCandidateAvailabilityCompleted;

        /// <remarks/>
        public event updateCandidateEmailMergeCompletedEventHandler updateCandidateEmailMergeCompleted;

        /// <remarks/>
        public event createCandidateNoteCompletedEventHandler createCandidateNoteCompleted;

        /// <remarks/>
        public event createCandidateReferenceCompletedEventHandler createCandidateReferenceCompleted;

        /// <remarks/>
        public event searchStartCompletedEventHandler searchStartCompleted;

        /// <remarks/>
        public event updateStartCompletedEventHandler updateStartCompleted;

        /// <remarks/>
        public event saveTimeSheetCompletedEventHandler saveTimeSheetCompleted;

        /// <remarks/>
        public event createBillingRecordCompletedEventHandler createBillingRecordCompleted;

        /// <remarks/>
        public event createPayRecordCompletedEventHandler createPayRecordCompleted;

        /// <remarks/>
        public event updateBillingRecordCompletedEventHandler updateBillingRecordCompleted;

        /// <remarks/>
        public event updatePayRecordCompletedEventHandler updatePayRecordCompleted;

        /// <remarks/>
        public event uploadResumeCompletedEventHandler uploadResumeCompleted;

        /// <remarks/>
        public event createJobApplicationCompletedEventHandler createJobApplicationCompleted;

        /// <remarks/>
        public event createSubmittalCompletedEventHandler createSubmittalCompleted;

        /// <remarks/>
        public event searchSubmittalCompletedEventHandler searchSubmittalCompleted;

        /// <remarks/>
        public event updateSubmittalCompletedEventHandler updateSubmittalCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/searchCompany", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string searchCompany(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long companyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool companyidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string company,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zip,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string country,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string phone,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string fax,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string url,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string parentcompany,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool showall,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool showallSpecified,
                        [System.Xml.Serialization.XmlElementAttribute("types", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] types,
                        [System.Xml.Serialization.XmlElementAttribute("ownerids", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long[] ownerids,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string division,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out DataSet data)
        {
            object[] results = this.Invoke("searchCompany", new object[] {
                        clientid,
                        username,
                        password,
                        companyid,
                        companyidSpecified,
                        company,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        phone,
                        fax,
                        url,
                        parentcompany,
                        showall,
                        showallSpecified,
                        types,
                        ownerids,
                        division});
            message = ((string)(results[1]));
            data = ((DataSet)(results[2]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void searchCompanyAsync(
                    long clientid,
                    string username,
                    string password,
                    long companyid,
                    bool companyidSpecified,
                    string company,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string phone,
                    string fax,
                    string url,
                    string parentcompany,
                    bool showall,
                    bool showallSpecified,
                    string[] types,
                    long[] ownerids,
                    string division)
        {
            this.searchCompanyAsync(clientid, username, password, companyid, companyidSpecified, company, address, city, state, zip, country, phone, fax, url, parentcompany, showall, showallSpecified, types, ownerids, division, null);
        }

        /// <remarks/>
        public void searchCompanyAsync(
                    long clientid,
                    string username,
                    string password,
                    long companyid,
                    bool companyidSpecified,
                    string company,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string phone,
                    string fax,
                    string url,
                    string parentcompany,
                    bool showall,
                    bool showallSpecified,
                    string[] types,
                    long[] ownerids,
                    string division,
                    object userState)
        {
            if ((this.searchCompanyOperationCompleted == null))
            {
                this.searchCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchCompanyOperationCompleted);
            }
            this.InvokeAsync("searchCompany", new object[] {
                        clientid,
                        username,
                        password,
                        companyid,
                        companyidSpecified,
                        company,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        phone,
                        fax,
                        url,
                        parentcompany,
                        showall,
                        showallSpecified,
                        types,
                        ownerids,
                        division}, this.searchCompanyOperationCompleted, userState);
        }

        private void OnsearchCompanyOperationCompleted(object arg)
        {
            if ((this.searchCompanyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchCompanyCompleted(this, new searchCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createCompany", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createCompany(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string companyname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address1,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address2,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zipcode,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string country,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string phone,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string fax,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string url,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string parentcompany,
                    [System.Xml.Serialization.XmlElementAttribute("companytypes", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] companytypes,
                    [System.Xml.Serialization.XmlElementAttribute("owners", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] OwnerType[] owners,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out long companyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool companyidSpecified)
        {
            object[] results = this.Invoke("createCompany", new object[] {
                        clientid,
                        username,
                        password,
                        companyname,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        country,
                        phone,
                        fax,
                        email,
                        url,
                        parentcompany,
                        companytypes,
                        owners});
            message = ((string)(results[1]));
            companyid = ((long)(results[2]));
            companyidSpecified = ((bool)(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createCompanyAsync(
                    long clientid,
                    string username,
                    string password,
                    string companyname,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string country,
                    string phone,
                    string fax,
                    string email,
                    string url,
                    string parentcompany,
                    string[] companytypes,
                    OwnerType[] owners)
        {
            this.createCompanyAsync(clientid, username, password, companyname, address1, address2, city, state, zipcode, country, phone, fax, email, url, parentcompany, companytypes, owners, null);
        }

        /// <remarks/>
        public void createCompanyAsync(
                    long clientid,
                    string username,
                    string password,
                    string companyname,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string country,
                    string phone,
                    string fax,
                    string email,
                    string url,
                    string parentcompany,
                    string[] companytypes,
                    OwnerType[] owners,
                    object userState)
        {
            if ((this.createCompanyOperationCompleted == null))
            {
                this.createCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCompanyOperationCompleted);
            }
            this.InvokeAsync("createCompany", new object[] {
                        clientid,
                        username,
                        password,
                        companyname,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        country,
                        phone,
                        fax,
                        email,
                        url,
                        parentcompany,
                        companytypes,
                        owners}, this.createCompanyOperationCompleted, userState);
        }

        private void OncreateCompanyOperationCompleted(object arg)
        {
            if ((this.createCompanyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompanyCompleted(this, new createCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateCompany", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateCompany(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long companyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string name,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long parentcompanyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool parentcompanyidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute("addresses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] CompanyAddressType[] addresses,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string subguidelines,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxsubmittals,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxsubmittalsSpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool references,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool referencesSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool drugtest,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool drugtestSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool backgroundcheck,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backgroundcheckSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool securityclearance,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool securityclearanceSpecified,
                                [System.Xml.Serialization.XmlElementAttribute("Userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] Userfields,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double discount,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool discountSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string discountper,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double percentagediscount,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool percentagediscountSpecified,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] FinancialsType financials,
                                    [System.Xml.Serialization.XmlElementAttribute("owners", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] OwnerType[] owners,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateCompany", new object[] {
                        clientid,
                        username,
                        password,
                        companyid,
                        name,
                        parentcompanyid,
                        parentcompanyidSpecified,
                        addresses,
                        subguidelines,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        references,
                        referencesSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        Userfields,
                        discount,
                        discountSpecified,
                        discountper,
                        percentagediscount,
                        percentagediscountSpecified,
                        financials,
                        owners});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateCompanyAsync(
                    long clientid,
                    string username,
                    string password,
                    long companyid,
                    string name,
                    long parentcompanyid,
                    bool parentcompanyidSpecified,
                    CompanyAddressType[] addresses,
                    string subguidelines,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool references,
                    bool referencesSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    UserfieldsType[] Userfields,
                    double discount,
                    bool discountSpecified,
                    string discountper,
                    double percentagediscount,
                    bool percentagediscountSpecified,
                    FinancialsType financials,
                    OwnerType[] owners)
        {
            this.updateCompanyAsync(clientid, username, password, companyid, name, parentcompanyid, parentcompanyidSpecified, addresses, subguidelines, maxsubmittals, maxsubmittalsSpecified, references, referencesSpecified, drugtest, drugtestSpecified, backgroundcheck, backgroundcheckSpecified, securityclearance, securityclearanceSpecified, Userfields, discount, discountSpecified, discountper, percentagediscount, percentagediscountSpecified, financials, owners, null);
        }

        /// <remarks/>
        public void updateCompanyAsync(
                    long clientid,
                    string username,
                    string password,
                    long companyid,
                    string name,
                    long parentcompanyid,
                    bool parentcompanyidSpecified,
                    CompanyAddressType[] addresses,
                    string subguidelines,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool references,
                    bool referencesSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    UserfieldsType[] Userfields,
                    double discount,
                    bool discountSpecified,
                    string discountper,
                    double percentagediscount,
                    bool percentagediscountSpecified,
                    FinancialsType financials,
                    OwnerType[] owners,
                    object userState)
        {
            if ((this.updateCompanyOperationCompleted == null))
            {
                this.updateCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCompanyOperationCompleted);
            }
            this.InvokeAsync("updateCompany", new object[] {
                        clientid,
                        username,
                        password,
                        companyid,
                        name,
                        parentcompanyid,
                        parentcompanyidSpecified,
                        addresses,
                        subguidelines,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        references,
                        referencesSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        Userfields,
                        discount,
                        discountSpecified,
                        discountper,
                        percentagediscount,
                        percentagediscountSpecified,
                        financials,
                        owners}, this.updateCompanyOperationCompleted, userState);
        }

        private void OnupdateCompanyOperationCompleted(object arg)
        {
            if ((this.updateCompanyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCompanyCompleted(this, new updateCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/searchContact", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string searchContact(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long contactid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool contactidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string firstname,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string lastname,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string company,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string title,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zip,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string country,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string phone,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string division,
                      [System.Xml.Serialization.XmlElementAttribute("types", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] types,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool showprimary,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool showprimarySpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long ownerid,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool owneridSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool showinactive,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool showinactiveSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out DataSet data)
        {
            object[] results = this.Invoke("searchContact", new object[] {
                        clientid,
                        username,
                        password,
                        contactid,
                        contactidSpecified,
                        firstname,
                        lastname,
                        company,
                        email,
                        title,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        phone,
                        division,
                        types,
                        showprimary,
                        showprimarySpecified,
                        ownerid,
                        owneridSpecified,
                        showinactive,
                        showinactiveSpecified});
            message = ((string)(results[1]));
            data = ((DataSet)(results[2]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void searchContactAsync(
                    long clientid,
                    string username,
                    string password,
                    long contactid,
                    bool contactidSpecified,
                    string firstname,
                    string lastname,
                    string company,
                    string email,
                    string title,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string phone,
                    string division,
                    string[] types,
                    bool showprimary,
                    bool showprimarySpecified,
                    long ownerid,
                    bool owneridSpecified,
                    bool showinactive,
                    bool showinactiveSpecified)
        {
            this.searchContactAsync(clientid, username, password, contactid, contactidSpecified, firstname, lastname, company, email, title, address, city, state, zip, country, phone, division, types, showprimary, showprimarySpecified, ownerid, owneridSpecified, showinactive, showinactiveSpecified, null);
        }

        /// <remarks/>
        public void searchContactAsync(
                    long clientid,
                    string username,
                    string password,
                    long contactid,
                    bool contactidSpecified,
                    string firstname,
                    string lastname,
                    string company,
                    string email,
                    string title,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string phone,
                    string division,
                    string[] types,
                    bool showprimary,
                    bool showprimarySpecified,
                    long ownerid,
                    bool owneridSpecified,
                    bool showinactive,
                    bool showinactiveSpecified,
                    object userState)
        {
            if ((this.searchContactOperationCompleted == null))
            {
                this.searchContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchContactOperationCompleted);
            }
            this.InvokeAsync("searchContact", new object[] {
                        clientid,
                        username,
                        password,
                        contactid,
                        contactidSpecified,
                        firstname,
                        lastname,
                        company,
                        email,
                        title,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        phone,
                        division,
                        types,
                        showprimary,
                        showprimarySpecified,
                        ownerid,
                        owneridSpecified,
                        showinactive,
                        showinactiveSpecified}, this.searchContactOperationCompleted, userState);
        }

        private void OnsearchContactOperationCompleted(object arg)
        {
            if ((this.searchContactCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchContactCompleted(this, new searchContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createContact", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createContact(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string company,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string firstname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string lastname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string title,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string department,
                    [System.Xml.Serialization.XmlElementAttribute("phones", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] PhoneType[] phones,
                    [System.Xml.Serialization.XmlElementAttribute("addresses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] ContactAddressType[] addresses,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string alternateemail,
                    [System.Xml.Serialization.XmlElementAttribute("types", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] types,
                    [System.Xml.Serialization.XmlElementAttribute("owners", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] OwnerType[] owners,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long reportsto,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool reportstoSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool primary,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool primarySpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantname,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantemail,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantphone,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantphoneextension,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string subguidelines,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxsubmittals,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxsubmittalsSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool references,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool referencesSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool drugtest,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool drugtestSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool backgroundcheck,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backgroundcheckSpecified,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool securityclearance,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool securityclearanceSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out long contactid,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool contactidSpecified)
        {
            object[] results = this.Invoke("createContact", new object[] {
                        clientid,
                        username,
                        password,
                        company,
                        firstname,
                        lastname,
                        title,
                        department,
                        phones,
                        addresses,
                        email,
                        alternateemail,
                        types,
                        owners,
                        reportsto,
                        reportstoSpecified,
                        primary,
                        primarySpecified,
                        assistantname,
                        assistantemail,
                        assistantphone,
                        assistantphoneextension,
                        subguidelines,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        references,
                        referencesSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified});
            message = ((string)(results[1]));
            contactid = ((long)(results[2]));
            contactidSpecified = ((bool)(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createContactAsync(
                    long clientid,
                    string username,
                    string password,
                    string company,
                    string firstname,
                    string lastname,
                    string title,
                    string department,
                    PhoneType[] phones,
                    ContactAddressType[] addresses,
                    string email,
                    string alternateemail,
                    string[] types,
                    OwnerType[] owners,
                    long reportsto,
                    bool reportstoSpecified,
                    bool primary,
                    bool primarySpecified,
                    string assistantname,
                    string assistantemail,
                    string assistantphone,
                    string assistantphoneextension,
                    string subguidelines,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool references,
                    bool referencesSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified)
        {
            this.createContactAsync(clientid, username, password, company, firstname, lastname, title, department, phones, addresses, email, alternateemail, types, owners, reportsto, reportstoSpecified, primary, primarySpecified, assistantname, assistantemail, assistantphone, assistantphoneextension, subguidelines, maxsubmittals, maxsubmittalsSpecified, references, referencesSpecified, drugtest, drugtestSpecified, backgroundcheck, backgroundcheckSpecified, securityclearance, securityclearanceSpecified, null);
        }

        /// <remarks/>
        public void createContactAsync(
                    long clientid,
                    string username,
                    string password,
                    string company,
                    string firstname,
                    string lastname,
                    string title,
                    string department,
                    PhoneType[] phones,
                    ContactAddressType[] addresses,
                    string email,
                    string alternateemail,
                    string[] types,
                    OwnerType[] owners,
                    long reportsto,
                    bool reportstoSpecified,
                    bool primary,
                    bool primarySpecified,
                    string assistantname,
                    string assistantemail,
                    string assistantphone,
                    string assistantphoneextension,
                    string subguidelines,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool references,
                    bool referencesSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    object userState)
        {
            if ((this.createContactOperationCompleted == null))
            {
                this.createContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateContactOperationCompleted);
            }
            this.InvokeAsync("createContact", new object[] {
                        clientid,
                        username,
                        password,
                        company,
                        firstname,
                        lastname,
                        title,
                        department,
                        phones,
                        addresses,
                        email,
                        alternateemail,
                        types,
                        owners,
                        reportsto,
                        reportstoSpecified,
                        primary,
                        primarySpecified,
                        assistantname,
                        assistantemail,
                        assistantphone,
                        assistantphoneextension,
                        subguidelines,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        references,
                        referencesSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified}, this.createContactOperationCompleted, userState);
        }

        private void OncreateContactOperationCompleted(object arg)
        {
            if ((this.createContactCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createContactCompleted(this, new createContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateContact", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateContact(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long contactid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string firstname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string lastname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string title,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long companyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool companyidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string department,
                      [System.Xml.Serialization.XmlElementAttribute("addresses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] ContactAddressType[] addresses,
                      [System.Xml.Serialization.XmlElementAttribute("phones", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] PhoneType[] phones,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long reportsto,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool reportstoSpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool active,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool activeSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool primary,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool primarySpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string alternateemail,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantname,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantemail,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantphone,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assistantphoneextension,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string subguidelines,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxsubmittals,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxsubmittalsSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool references,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool referencesSpecified,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool drugtest,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool drugtestSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool backgroundcheck,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backgroundcheckSpecified,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool securityclearance,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool securityclearanceSpecified,
                                      [System.Xml.Serialization.XmlElementAttribute("Userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] Userfields,
                                      [System.Xml.Serialization.XmlElementAttribute("owners", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] OwnerType[] owners,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateContact", new object[] {
                        clientid,
                        username,
                        password,
                        contactid,
                        firstname,
                        lastname,
                        title,
                        companyid,
                        companyidSpecified,
                        department,
                        addresses,
                        phones,
                        reportsto,
                        reportstoSpecified,
                        active,
                        activeSpecified,
                        primary,
                        primarySpecified,
                        email,
                        alternateemail,
                        assistantname,
                        assistantemail,
                        assistantphone,
                        assistantphoneextension,
                        subguidelines,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        references,
                        referencesSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        Userfields,
                        owners});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateContactAsync(
                    long clientid,
                    string username,
                    string password,
                    long contactid,
                    string firstname,
                    string lastname,
                    string title,
                    long companyid,
                    bool companyidSpecified,
                    string department,
                    ContactAddressType[] addresses,
                    PhoneType[] phones,
                    long reportsto,
                    bool reportstoSpecified,
                    bool active,
                    bool activeSpecified,
                    bool primary,
                    bool primarySpecified,
                    string email,
                    string alternateemail,
                    string assistantname,
                    string assistantemail,
                    string assistantphone,
                    string assistantphoneextension,
                    string subguidelines,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool references,
                    bool referencesSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    UserfieldsType[] Userfields,
                    OwnerType[] owners)
        {
            this.updateContactAsync(clientid, username, password, contactid, firstname, lastname, title, companyid, companyidSpecified, department, addresses, phones, reportsto, reportstoSpecified, active, activeSpecified, primary, primarySpecified, email, alternateemail, assistantname, assistantemail, assistantphone, assistantphoneextension, subguidelines, maxsubmittals, maxsubmittalsSpecified, references, referencesSpecified, drugtest, drugtestSpecified, backgroundcheck, backgroundcheckSpecified, securityclearance, securityclearanceSpecified, Userfields, owners, null);
        }

        /// <remarks/>
        public void updateContactAsync(
                    long clientid,
                    string username,
                    string password,
                    long contactid,
                    string firstname,
                    string lastname,
                    string title,
                    long companyid,
                    bool companyidSpecified,
                    string department,
                    ContactAddressType[] addresses,
                    PhoneType[] phones,
                    long reportsto,
                    bool reportstoSpecified,
                    bool active,
                    bool activeSpecified,
                    bool primary,
                    bool primarySpecified,
                    string email,
                    string alternateemail,
                    string assistantname,
                    string assistantemail,
                    string assistantphone,
                    string assistantphoneextension,
                    string subguidelines,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool references,
                    bool referencesSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    UserfieldsType[] Userfields,
                    OwnerType[] owners,
                    object userState)
        {
            if ((this.updateContactOperationCompleted == null))
            {
                this.updateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateContactOperationCompleted);
            }
            this.InvokeAsync("updateContact", new object[] {
                        clientid,
                        username,
                        password,
                        contactid,
                        firstname,
                        lastname,
                        title,
                        companyid,
                        companyidSpecified,
                        department,
                        addresses,
                        phones,
                        reportsto,
                        reportstoSpecified,
                        active,
                        activeSpecified,
                        primary,
                        primarySpecified,
                        email,
                        alternateemail,
                        assistantname,
                        assistantemail,
                        assistantphone,
                        assistantphoneextension,
                        subguidelines,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        references,
                        referencesSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        Userfields,
                        owners}, this.updateContactOperationCompleted, userState);
        }

        private void OnupdateContactOperationCompleted(object arg)
        {
            if ((this.updateContactCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateContactCompleted(this, new updateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createContactNote", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createContactNote([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long contactid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string note, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long recruiterid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool recruiteridSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string action, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime actionDate, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool actionDateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long link2AnOpenJob, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool link2AnOpenJobSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long link2ACandidate, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool link2ACandidateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("createContactNote", new object[] {
                        clientid,
                        username,
                        password,
                        contactid,
                        note,
                        recruiterid,
                        recruiteridSpecified,
                        action,
                        actionDate,
                        actionDateSpecified,
                        link2AnOpenJob,
                        link2AnOpenJobSpecified,
                        link2ACandidate,
                        link2ACandidateSpecified});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createContactNoteAsync(long clientid, string username, string password, long contactid, string note, long recruiterid, bool recruiteridSpecified, string action, System.DateTime actionDate, bool actionDateSpecified, long link2AnOpenJob, bool link2AnOpenJobSpecified, long link2ACandidate, bool link2ACandidateSpecified)
        {
            this.createContactNoteAsync(clientid, username, password, contactid, note, recruiterid, recruiteridSpecified, action, actionDate, actionDateSpecified, link2AnOpenJob, link2AnOpenJobSpecified, link2ACandidate, link2ACandidateSpecified, null);
        }

        /// <remarks/>
        public void createContactNoteAsync(long clientid, string username, string password, long contactid, string note, long recruiterid, bool recruiteridSpecified, string action, System.DateTime actionDate, bool actionDateSpecified, long link2AnOpenJob, bool link2AnOpenJobSpecified, long link2ACandidate, bool link2ACandidateSpecified, object userState)
        {
            if ((this.createContactNoteOperationCompleted == null))
            {
                this.createContactNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateContactNoteOperationCompleted);
            }
            this.InvokeAsync("createContactNote", new object[] {
                        clientid,
                        username,
                        password,
                        contactid,
                        note,
                        recruiterid,
                        recruiteridSpecified,
                        action,
                        actionDate,
                        actionDateSpecified,
                        link2AnOpenJob,
                        link2AnOpenJobSpecified,
                        link2ACandidate,
                        link2ACandidateSpecified}, this.createContactNoteOperationCompleted, userState);
        }

        private void OncreateContactNoteOperationCompleted(object arg)
        {
            if ((this.createContactNoteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createContactNoteCompleted(this, new createContactNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/searchJob", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string searchJob(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool jobidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string jobdivaref,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string optionalref,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                      [System.Xml.Serialization.XmlElementAttribute("state", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] state,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string title,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long contactid,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool contactidSpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long companyid,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool companyidSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string companyname,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int status,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool statusSpecified,
                            [System.Xml.Serialization.XmlElementAttribute("jobtype", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] jobtype,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime issuedatefrom,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool issuedatefromSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime issuedateto,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool issuedatetoSpecified,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime startdatefrom,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool startdatefromSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime startdateto,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool startdatetoSpecified,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out DataSet data)
        {
            object[] results = this.Invoke("searchJob", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        jobidSpecified,
                        jobdivaref,
                        optionalref,
                        city,
                        state,
                        title,
                        contactid,
                        contactidSpecified,
                        companyid,
                        companyidSpecified,
                        companyname,
                        status,
                        statusSpecified,
                        jobtype,
                        issuedatefrom,
                        issuedatefromSpecified,
                        issuedateto,
                        issuedatetoSpecified,
                        startdatefrom,
                        startdatefromSpecified,
                        startdateto,
                        startdatetoSpecified});
            message = ((string)(results[1]));
            data = ((DataSet)(results[2]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void searchJobAsync(
                    long clientid,
                    string username,
                    string password,
                    long jobid,
                    bool jobidSpecified,
                    string jobdivaref,
                    string optionalref,
                    string city,
                    string[] state,
                    string title,
                    long contactid,
                    bool contactidSpecified,
                    long companyid,
                    bool companyidSpecified,
                    string companyname,
                    int status,
                    bool statusSpecified,
                    string[] jobtype,
                    System.DateTime issuedatefrom,
                    bool issuedatefromSpecified,
                    System.DateTime issuedateto,
                    bool issuedatetoSpecified,
                    System.DateTime startdatefrom,
                    bool startdatefromSpecified,
                    System.DateTime startdateto,
                    bool startdatetoSpecified)
        {
            this.searchJobAsync(clientid, username, password, jobid, jobidSpecified, jobdivaref, optionalref, city, state, title, contactid, contactidSpecified, companyid, companyidSpecified, companyname, status, statusSpecified, jobtype, issuedatefrom, issuedatefromSpecified, issuedateto, issuedatetoSpecified, startdatefrom, startdatefromSpecified, startdateto, startdatetoSpecified, null);
        }

        /// <remarks/>
        public void searchJobAsync(
                    long clientid,
                    string username,
                    string password,
                    long jobid,
                    bool jobidSpecified,
                    string jobdivaref,
                    string optionalref,
                    string city,
                    string[] state,
                    string title,
                    long contactid,
                    bool contactidSpecified,
                    long companyid,
                    bool companyidSpecified,
                    string companyname,
                    int status,
                    bool statusSpecified,
                    string[] jobtype,
                    System.DateTime issuedatefrom,
                    bool issuedatefromSpecified,
                    System.DateTime issuedateto,
                    bool issuedatetoSpecified,
                    System.DateTime startdatefrom,
                    bool startdatefromSpecified,
                    System.DateTime startdateto,
                    bool startdatetoSpecified,
                    object userState)
        {
            if ((this.searchJobOperationCompleted == null))
            {
                this.searchJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchJobOperationCompleted);
            }
            this.InvokeAsync("searchJob", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        jobidSpecified,
                        jobdivaref,
                        optionalref,
                        city,
                        state,
                        title,
                        contactid,
                        contactidSpecified,
                        companyid,
                        companyidSpecified,
                        companyname,
                        status,
                        statusSpecified,
                        jobtype,
                        issuedatefrom,
                        issuedatefromSpecified,
                        issuedateto,
                        issuedatetoSpecified,
                        startdatefrom,
                        startdatefromSpecified,
                        startdateto,
                        startdatetoSpecified}, this.searchJobOperationCompleted, userState);
        }

        private void OnsearchJobOperationCompleted(object arg)
        {
            if ((this.searchJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchJobCompleted(this, new searchJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createJob", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createJob(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute("contacts", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] ContactRoleType[] contacts,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string title,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string description,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string department,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long companyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool companyidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string priority,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long divisionid,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool divisionidSpecified,
                        [System.Xml.Serialization.XmlElementAttribute("users", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserRoleType[] users,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int experience,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool experienceSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int status,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool statusSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string optionalref,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address1,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address2,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zipcode,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string countryid,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime startdate,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool startdateSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime enddate,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool enddateSpecified,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string jobtype,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int openings,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool openingsSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int fills,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fillsSpecified,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxsubmittals,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxsubmittalsSpecified,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool hidemyclient,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool hidemyclientSpecified,
                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool hidemyclientaddress,
                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool hidemyclientaddressSpecified,
                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool hidemeandmycompany,
                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool hidemeandmycompanySpecified,
                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool overtime,
                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool overtimeSpecified,
                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool reference,
                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool referenceSpecified,
                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool travel,
                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool travelSpecified,
                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool drugtest,
                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool drugtestSpecified,
                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool backgroundcheck,
                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backgroundcheckSpecified,
                                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool securityclearance,
                                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool securityclearanceSpecified,
                                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string remarks,
                                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string submittalinstruction,
                                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double minbillrate,
                                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool minbillrateSpecified,
                                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double maxbillrate,
                                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxbillrateSpecified,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string billratecurrency,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string billrateunit,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double minpayrate,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool minpayrateSpecified,
                                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double maxpayrate,
                                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxpayrateSpecified,
                                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string payratecurrency,
                                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string payrateunit,
                                                                [System.Xml.Serialization.XmlElementAttribute("skills", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] skills,
                                                                [System.Xml.Serialization.XmlElementAttribute("skillstates", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] skillstates,
                                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string skillzipcode,
                                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int skillzipcodemiles,
                                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool skillzipcodemilesSpecified,
                                                                  [System.Xml.Serialization.XmlElementAttribute("excludedskills", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] excludedskills,
                                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string harvest,
                                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int resumes,
                                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool resumesSpecified,
                                                                    [System.Xml.Serialization.XmlElementAttribute("attachments", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] Attachment[] attachments,
                                                                    [System.Xml.Serialization.XmlElementAttribute("Userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] Userfields,
                                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out long jobid,
                                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool jobidSpecified)
        {
            object[] results = this.Invoke("createJob", new object[] {
                        clientid,
                        username,
                        password,
                        contacts,
                        title,
                        description,
                        department,
                        companyid,
                        companyidSpecified,
                        priority,
                        divisionid,
                        divisionidSpecified,
                        users,
                        experience,
                        experienceSpecified,
                        status,
                        statusSpecified,
                        optionalref,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        countryid,
                        startdate,
                        startdateSpecified,
                        enddate,
                        enddateSpecified,
                        jobtype,
                        openings,
                        openingsSpecified,
                        fills,
                        fillsSpecified,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        hidemyclient,
                        hidemyclientSpecified,
                        hidemyclientaddress,
                        hidemyclientaddressSpecified,
                        hidemeandmycompany,
                        hidemeandmycompanySpecified,
                        overtime,
                        overtimeSpecified,
                        reference,
                        referenceSpecified,
                        travel,
                        travelSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        remarks,
                        submittalinstruction,
                        minbillrate,
                        minbillrateSpecified,
                        maxbillrate,
                        maxbillrateSpecified,
                        billratecurrency,
                        billrateunit,
                        minpayrate,
                        minpayrateSpecified,
                        maxpayrate,
                        maxpayrateSpecified,
                        payratecurrency,
                        payrateunit,
                        skills,
                        skillstates,
                        skillzipcode,
                        skillzipcodemiles,
                        skillzipcodemilesSpecified,
                        excludedskills,
                        harvest,
                        resumes,
                        resumesSpecified,
                        attachments,
                        Userfields});
            message = ((string)(results[1]));
            jobid = ((long)(results[2]));
            jobidSpecified = ((bool)(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createJobAsync(
                    long clientid,
                    string username,
                    string password,
                    ContactRoleType[] contacts,
                    string title,
                    string description,
                    string department,
                    long companyid,
                    bool companyidSpecified,
                    string priority,
                    long divisionid,
                    bool divisionidSpecified,
                    UserRoleType[] users,
                    int experience,
                    bool experienceSpecified,
                    int status,
                    bool statusSpecified,
                    string optionalref,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string countryid,
                    System.DateTime startdate,
                    bool startdateSpecified,
                    System.DateTime enddate,
                    bool enddateSpecified,
                    string jobtype,
                    int openings,
                    bool openingsSpecified,
                    int fills,
                    bool fillsSpecified,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool hidemyclient,
                    bool hidemyclientSpecified,
                    bool hidemyclientaddress,
                    bool hidemyclientaddressSpecified,
                    bool hidemeandmycompany,
                    bool hidemeandmycompanySpecified,
                    bool overtime,
                    bool overtimeSpecified,
                    bool reference,
                    bool referenceSpecified,
                    bool travel,
                    bool travelSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    string remarks,
                    string submittalinstruction,
                    double minbillrate,
                    bool minbillrateSpecified,
                    double maxbillrate,
                    bool maxbillrateSpecified,
                    string billratecurrency,
                    string billrateunit,
                    double minpayrate,
                    bool minpayrateSpecified,
                    double maxpayrate,
                    bool maxpayrateSpecified,
                    string payratecurrency,
                    string payrateunit,
                    string[] skills,
                    string[] skillstates,
                    string skillzipcode,
                    int skillzipcodemiles,
                    bool skillzipcodemilesSpecified,
                    string[] excludedskills,
                    string harvest,
                    int resumes,
                    bool resumesSpecified,
                    Attachment[] attachments,
                    UserfieldsType[] Userfields)
        {
            this.createJobAsync(clientid, username, password, contacts, title, description, department, companyid, companyidSpecified, priority, divisionid, divisionidSpecified, users, experience, experienceSpecified, status, statusSpecified, optionalref, address1, address2, city, state, zipcode, countryid, startdate, startdateSpecified, enddate, enddateSpecified, jobtype, openings, openingsSpecified, fills, fillsSpecified, maxsubmittals, maxsubmittalsSpecified, hidemyclient, hidemyclientSpecified, hidemyclientaddress, hidemyclientaddressSpecified, hidemeandmycompany, hidemeandmycompanySpecified, overtime, overtimeSpecified, reference, referenceSpecified, travel, travelSpecified, drugtest, drugtestSpecified, backgroundcheck, backgroundcheckSpecified, securityclearance, securityclearanceSpecified, remarks, submittalinstruction, minbillrate, minbillrateSpecified, maxbillrate, maxbillrateSpecified, billratecurrency, billrateunit, minpayrate, minpayrateSpecified, maxpayrate, maxpayrateSpecified, payratecurrency, payrateunit, skills, skillstates, skillzipcode, skillzipcodemiles, skillzipcodemilesSpecified, excludedskills, harvest, resumes, resumesSpecified, attachments, Userfields, null);
        }

        /// <remarks/>
        public void createJobAsync(
                    long clientid,
                    string username,
                    string password,
                    ContactRoleType[] contacts,
                    string title,
                    string description,
                    string department,
                    long companyid,
                    bool companyidSpecified,
                    string priority,
                    long divisionid,
                    bool divisionidSpecified,
                    UserRoleType[] users,
                    int experience,
                    bool experienceSpecified,
                    int status,
                    bool statusSpecified,
                    string optionalref,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string countryid,
                    System.DateTime startdate,
                    bool startdateSpecified,
                    System.DateTime enddate,
                    bool enddateSpecified,
                    string jobtype,
                    int openings,
                    bool openingsSpecified,
                    int fills,
                    bool fillsSpecified,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool hidemyclient,
                    bool hidemyclientSpecified,
                    bool hidemyclientaddress,
                    bool hidemyclientaddressSpecified,
                    bool hidemeandmycompany,
                    bool hidemeandmycompanySpecified,
                    bool overtime,
                    bool overtimeSpecified,
                    bool reference,
                    bool referenceSpecified,
                    bool travel,
                    bool travelSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    string remarks,
                    string submittalinstruction,
                    double minbillrate,
                    bool minbillrateSpecified,
                    double maxbillrate,
                    bool maxbillrateSpecified,
                    string billratecurrency,
                    string billrateunit,
                    double minpayrate,
                    bool minpayrateSpecified,
                    double maxpayrate,
                    bool maxpayrateSpecified,
                    string payratecurrency,
                    string payrateunit,
                    string[] skills,
                    string[] skillstates,
                    string skillzipcode,
                    int skillzipcodemiles,
                    bool skillzipcodemilesSpecified,
                    string[] excludedskills,
                    string harvest,
                    int resumes,
                    bool resumesSpecified,
                    Attachment[] attachments,
                    UserfieldsType[] Userfields,
                    object userState)
        {
            if ((this.createJobOperationCompleted == null))
            {
                this.createJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateJobOperationCompleted);
            }
            this.InvokeAsync("createJob", new object[] {
                        clientid,
                        username,
                        password,
                        contacts,
                        title,
                        description,
                        department,
                        companyid,
                        companyidSpecified,
                        priority,
                        divisionid,
                        divisionidSpecified,
                        users,
                        experience,
                        experienceSpecified,
                        status,
                        statusSpecified,
                        optionalref,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        countryid,
                        startdate,
                        startdateSpecified,
                        enddate,
                        enddateSpecified,
                        jobtype,
                        openings,
                        openingsSpecified,
                        fills,
                        fillsSpecified,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        hidemyclient,
                        hidemyclientSpecified,
                        hidemyclientaddress,
                        hidemyclientaddressSpecified,
                        hidemeandmycompany,
                        hidemeandmycompanySpecified,
                        overtime,
                        overtimeSpecified,
                        reference,
                        referenceSpecified,
                        travel,
                        travelSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        remarks,
                        submittalinstruction,
                        minbillrate,
                        minbillrateSpecified,
                        maxbillrate,
                        maxbillrateSpecified,
                        billratecurrency,
                        billrateunit,
                        minpayrate,
                        minpayrateSpecified,
                        maxpayrate,
                        maxpayrateSpecified,
                        payratecurrency,
                        payrateunit,
                        skills,
                        skillstates,
                        skillzipcode,
                        skillzipcodemiles,
                        skillzipcodemilesSpecified,
                        excludedskills,
                        harvest,
                        resumes,
                        resumesSpecified,
                        attachments,
                        Userfields}, this.createJobOperationCompleted, userState);
        }

        private void OncreateJobOperationCompleted(object arg)
        {
            if ((this.createJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createJobCompleted(this, new createJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateJob", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateJob(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string optionalref,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string title,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string description,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string postingtitle,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string postingdescription,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long companyid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool companyidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute("contacts", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] ContactRoleType[] contacts,
                      [System.Xml.Serialization.XmlElementAttribute("users", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserRoleType[] users,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address1,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address2,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zipcode,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string countryid,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime startdate,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool startdateSpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime enddate,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool enddateSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int status,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool statusSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string jobtype,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string priority,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int openings,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool openingsSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int fills,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fillsSpecified,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxsubmittals,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxsubmittalsSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool hidemyclient,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool hidemyclientSpecified,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool hidemyclientaddress,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool hidemyclientaddressSpecified,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool hidemeandmycompany,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool hidemeandmycompanySpecified,
                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool overtime,
                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool overtimeSpecified,
                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool reference,
                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool referenceSpecified,
                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool travel,
                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool travelSpecified,
                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool drugtest,
                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool drugtestSpecified,
                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool backgroundcheck,
                                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backgroundcheckSpecified,
                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool securityclearance,
                                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool securityclearanceSpecified,
                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string remarks,
                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string submittalinstruction,
                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double minbillrate,
                                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool minbillrateSpecified,
                                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double maxbillrate,
                                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxbillrateSpecified,
                                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double minpayrate,
                                                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool minpayrateSpecified,
                                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double maxpayrate,
                                                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxpayrateSpecified,
                                                            [System.Xml.Serialization.XmlElementAttribute("Userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] Userfields,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string harvest,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int resumes,
                                                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool resumesSpecified,
                                                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateJob", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        optionalref,
                        title,
                        description,
                        postingtitle,
                        postingdescription,
                        companyid,
                        companyidSpecified,
                        contacts,
                        users,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        countryid,
                        startdate,
                        startdateSpecified,
                        enddate,
                        enddateSpecified,
                        status,
                        statusSpecified,
                        jobtype,
                        priority,
                        openings,
                        openingsSpecified,
                        fills,
                        fillsSpecified,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        hidemyclient,
                        hidemyclientSpecified,
                        hidemyclientaddress,
                        hidemyclientaddressSpecified,
                        hidemeandmycompany,
                        hidemeandmycompanySpecified,
                        overtime,
                        overtimeSpecified,
                        reference,
                        referenceSpecified,
                        travel,
                        travelSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        remarks,
                        submittalinstruction,
                        minbillrate,
                        minbillrateSpecified,
                        maxbillrate,
                        maxbillrateSpecified,
                        minpayrate,
                        minpayrateSpecified,
                        maxpayrate,
                        maxpayrateSpecified,
                        Userfields,
                        harvest,
                        resumes,
                        resumesSpecified});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateJobAsync(
                    long clientid,
                    string username,
                    string password,
                    long jobid,
                    string optionalref,
                    string title,
                    string description,
                    string postingtitle,
                    string postingdescription,
                    long companyid,
                    bool companyidSpecified,
                    ContactRoleType[] contacts,
                    UserRoleType[] users,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string countryid,
                    System.DateTime startdate,
                    bool startdateSpecified,
                    System.DateTime enddate,
                    bool enddateSpecified,
                    int status,
                    bool statusSpecified,
                    string jobtype,
                    string priority,
                    int openings,
                    bool openingsSpecified,
                    int fills,
                    bool fillsSpecified,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool hidemyclient,
                    bool hidemyclientSpecified,
                    bool hidemyclientaddress,
                    bool hidemyclientaddressSpecified,
                    bool hidemeandmycompany,
                    bool hidemeandmycompanySpecified,
                    bool overtime,
                    bool overtimeSpecified,
                    bool reference,
                    bool referenceSpecified,
                    bool travel,
                    bool travelSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    string remarks,
                    string submittalinstruction,
                    double minbillrate,
                    bool minbillrateSpecified,
                    double maxbillrate,
                    bool maxbillrateSpecified,
                    double minpayrate,
                    bool minpayrateSpecified,
                    double maxpayrate,
                    bool maxpayrateSpecified,
                    UserfieldsType[] Userfields,
                    string harvest,
                    int resumes,
                    bool resumesSpecified)
        {
            this.updateJobAsync(clientid, username, password, jobid, optionalref, title, description, postingtitle, postingdescription, companyid, companyidSpecified, contacts, users, address1, address2, city, state, zipcode, countryid, startdate, startdateSpecified, enddate, enddateSpecified, status, statusSpecified, jobtype, priority, openings, openingsSpecified, fills, fillsSpecified, maxsubmittals, maxsubmittalsSpecified, hidemyclient, hidemyclientSpecified, hidemyclientaddress, hidemyclientaddressSpecified, hidemeandmycompany, hidemeandmycompanySpecified, overtime, overtimeSpecified, reference, referenceSpecified, travel, travelSpecified, drugtest, drugtestSpecified, backgroundcheck, backgroundcheckSpecified, securityclearance, securityclearanceSpecified, remarks, submittalinstruction, minbillrate, minbillrateSpecified, maxbillrate, maxbillrateSpecified, minpayrate, minpayrateSpecified, maxpayrate, maxpayrateSpecified, Userfields, harvest, resumes, resumesSpecified, null);
        }

        /// <remarks/>
        public void updateJobAsync(
                    long clientid,
                    string username,
                    string password,
                    long jobid,
                    string optionalref,
                    string title,
                    string description,
                    string postingtitle,
                    string postingdescription,
                    long companyid,
                    bool companyidSpecified,
                    ContactRoleType[] contacts,
                    UserRoleType[] users,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string countryid,
                    System.DateTime startdate,
                    bool startdateSpecified,
                    System.DateTime enddate,
                    bool enddateSpecified,
                    int status,
                    bool statusSpecified,
                    string jobtype,
                    string priority,
                    int openings,
                    bool openingsSpecified,
                    int fills,
                    bool fillsSpecified,
                    int maxsubmittals,
                    bool maxsubmittalsSpecified,
                    bool hidemyclient,
                    bool hidemyclientSpecified,
                    bool hidemyclientaddress,
                    bool hidemyclientaddressSpecified,
                    bool hidemeandmycompany,
                    bool hidemeandmycompanySpecified,
                    bool overtime,
                    bool overtimeSpecified,
                    bool reference,
                    bool referenceSpecified,
                    bool travel,
                    bool travelSpecified,
                    bool drugtest,
                    bool drugtestSpecified,
                    bool backgroundcheck,
                    bool backgroundcheckSpecified,
                    bool securityclearance,
                    bool securityclearanceSpecified,
                    string remarks,
                    string submittalinstruction,
                    double minbillrate,
                    bool minbillrateSpecified,
                    double maxbillrate,
                    bool maxbillrateSpecified,
                    double minpayrate,
                    bool minpayrateSpecified,
                    double maxpayrate,
                    bool maxpayrateSpecified,
                    UserfieldsType[] Userfields,
                    string harvest,
                    int resumes,
                    bool resumesSpecified,
                    object userState)
        {
            if ((this.updateJobOperationCompleted == null))
            {
                this.updateJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateJobOperationCompleted);
            }
            this.InvokeAsync("updateJob", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        optionalref,
                        title,
                        description,
                        postingtitle,
                        postingdescription,
                        companyid,
                        companyidSpecified,
                        contacts,
                        users,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        countryid,
                        startdate,
                        startdateSpecified,
                        enddate,
                        enddateSpecified,
                        status,
                        statusSpecified,
                        jobtype,
                        priority,
                        openings,
                        openingsSpecified,
                        fills,
                        fillsSpecified,
                        maxsubmittals,
                        maxsubmittalsSpecified,
                        hidemyclient,
                        hidemyclientSpecified,
                        hidemyclientaddress,
                        hidemyclientaddressSpecified,
                        hidemeandmycompany,
                        hidemeandmycompanySpecified,
                        overtime,
                        overtimeSpecified,
                        reference,
                        referenceSpecified,
                        travel,
                        travelSpecified,
                        drugtest,
                        drugtestSpecified,
                        backgroundcheck,
                        backgroundcheckSpecified,
                        securityclearance,
                        securityclearanceSpecified,
                        remarks,
                        submittalinstruction,
                        minbillrate,
                        minbillrateSpecified,
                        maxbillrate,
                        maxbillrateSpecified,
                        minpayrate,
                        minpayrateSpecified,
                        maxpayrate,
                        maxpayrateSpecified,
                        Userfields,
                        harvest,
                        resumes,
                        resumesSpecified}, this.updateJobOperationCompleted, userState);
        }

        private void OnupdateJobOperationCompleted(object arg)
        {
            if ((this.updateJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateJobCompleted(this, new updateJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createJobNote", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createJobNote([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string note, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long recruiterid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool recruiteridSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("createJobNote", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        note,
                        recruiterid,
                        recruiteridSpecified});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createJobNoteAsync(long clientid, string username, string password, long jobid, string note, long recruiterid, bool recruiteridSpecified)
        {
            this.createJobNoteAsync(clientid, username, password, jobid, note, recruiterid, recruiteridSpecified, null);
        }

        /// <remarks/>
        public void createJobNoteAsync(long clientid, string username, string password, long jobid, string note, long recruiterid, bool recruiteridSpecified, object userState)
        {
            if ((this.createJobNoteOperationCompleted == null))
            {
                this.createJobNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateJobNoteOperationCompleted);
            }
            this.InvokeAsync("createJobNote", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        note,
                        recruiterid,
                        recruiteridSpecified}, this.createJobNoteOperationCompleted, userState);
        }

        private void OncreateJobNoteOperationCompleted(object arg)
        {
            if ((this.createJobNoteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createJobNoteCompleted(this, new createJobNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/searchCandidateProfile", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string searchCandidateProfile([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string firstname, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string lastname, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string phone, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxreturned, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool maxreturnedSpecified, [System.Xml.Serialization.XmlElementAttribute("qualifications", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] QualificationType[] qualifications, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out DataSet data)
        {
            object[] results = this.Invoke("searchCandidateProfile", new object[] {
                        clientid,
                        username,
                        password,
                        firstname,
                        lastname,
                        email,
                        phone,
                        city,
                        state,
                        maxreturned,
                        maxreturnedSpecified,
                        qualifications});
            message = ((string)(results[1]));
            data = ((DataSet)(results[2]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void searchCandidateProfileAsync(long clientid, string username, string password, string firstname, string lastname, string email, string phone, string city, string state, int maxreturned, bool maxreturnedSpecified, QualificationType[] qualifications)
        {
            this.searchCandidateProfileAsync(clientid, username, password, firstname, lastname, email, phone, city, state, maxreturned, maxreturnedSpecified, qualifications, null);
        }

        /// <remarks/>
        public void searchCandidateProfileAsync(long clientid, string username, string password, string firstname, string lastname, string email, string phone, string city, string state, int maxreturned, bool maxreturnedSpecified, QualificationType[] qualifications, object userState)
        {
            if ((this.searchCandidateProfileOperationCompleted == null))
            {
                this.searchCandidateProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchCandidateProfileOperationCompleted);
            }
            this.InvokeAsync("searchCandidateProfile", new object[] {
                        clientid,
                        username,
                        password,
                        firstname,
                        lastname,
                        email,
                        phone,
                        city,
                        state,
                        maxreturned,
                        maxreturnedSpecified,
                        qualifications}, this.searchCandidateProfileOperationCompleted, userState);
        }

        private void OnsearchCandidateProfileOperationCompleted(object arg)
        {
            if ((this.searchCandidateProfileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchCandidateProfileCompleted(this, new searchCandidateProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createCandidate", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createCandidate(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string firstname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string lastname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address1,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address2,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zipcode,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string country,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string homephone,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string workphone,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string cellphone,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string fax,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double currentsalary,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool currentsalarySpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string currentsalaryunit,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double preferredsalary,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool preferredsalarySpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string preferredsalaryunit,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string narrative,
                        [System.Xml.Serialization.XmlElementAttribute("titleskillcertifications", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] TitleSkillCertificationType[] titleskillcertifications,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out long candidateid,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool candidateidSpecified)
        {
            object[] results = this.Invoke("createCandidate", new object[] {
                        clientid,
                        username,
                        password,
                        firstname,
                        lastname,
                        email,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        country,
                        homephone,
                        workphone,
                        cellphone,
                        fax,
                        currentsalary,
                        currentsalarySpecified,
                        currentsalaryunit,
                        preferredsalary,
                        preferredsalarySpecified,
                        preferredsalaryunit,
                        narrative,
                        titleskillcertifications});
            message = ((string)(results[1]));
            candidateid = ((long)(results[2]));
            candidateidSpecified = ((bool)(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createCandidateAsync(
                    long clientid,
                    string username,
                    string password,
                    string firstname,
                    string lastname,
                    string email,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string country,
                    string homephone,
                    string workphone,
                    string cellphone,
                    string fax,
                    double currentsalary,
                    bool currentsalarySpecified,
                    string currentsalaryunit,
                    double preferredsalary,
                    bool preferredsalarySpecified,
                    string preferredsalaryunit,
                    string narrative,
                    TitleSkillCertificationType[] titleskillcertifications)
        {
            this.createCandidateAsync(clientid, username, password, firstname, lastname, email, address1, address2, city, state, zipcode, country, homephone, workphone, cellphone, fax, currentsalary, currentsalarySpecified, currentsalaryunit, preferredsalary, preferredsalarySpecified, preferredsalaryunit, narrative, titleskillcertifications, null);
        }

        /// <remarks/>
        public void createCandidateAsync(
                    long clientid,
                    string username,
                    string password,
                    string firstname,
                    string lastname,
                    string email,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string country,
                    string homephone,
                    string workphone,
                    string cellphone,
                    string fax,
                    double currentsalary,
                    bool currentsalarySpecified,
                    string currentsalaryunit,
                    double preferredsalary,
                    bool preferredsalarySpecified,
                    string preferredsalaryunit,
                    string narrative,
                    TitleSkillCertificationType[] titleskillcertifications,
                    object userState)
        {
            if ((this.createCandidateOperationCompleted == null))
            {
                this.createCandidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCandidateOperationCompleted);
            }
            this.InvokeAsync("createCandidate", new object[] {
                        clientid,
                        username,
                        password,
                        firstname,
                        lastname,
                        email,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        country,
                        homephone,
                        workphone,
                        cellphone,
                        fax,
                        currentsalary,
                        currentsalarySpecified,
                        currentsalaryunit,
                        preferredsalary,
                        preferredsalarySpecified,
                        preferredsalaryunit,
                        narrative,
                        titleskillcertifications}, this.createCandidateOperationCompleted, userState);
        }

        private void OncreateCandidateOperationCompleted(object arg)
        {
            if ((this.createCandidateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCandidateCompleted(this, new createCandidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateCandidateProfile", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateCandidateProfile(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string firstname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string lastname,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string email,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string alternateemail,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address1,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string address2,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string city,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string state,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string zipcode,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string countryid,
                    [System.Xml.Serialization.XmlElementAttribute("phones", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] PhoneType[] phones,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double currentsalary,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool currentsalarySpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string currentsalaryunit,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double preferredsalary,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool preferredsalarySpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string preferredsalaryunit,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateCandidateProfile", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        firstname,
                        lastname,
                        email,
                        alternateemail,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        countryid,
                        phones,
                        currentsalary,
                        currentsalarySpecified,
                        currentsalaryunit,
                        preferredsalary,
                        preferredsalarySpecified,
                        preferredsalaryunit});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateCandidateProfileAsync(
                    long clientid,
                    string username,
                    string password,
                    long candidateid,
                    string firstname,
                    string lastname,
                    string email,
                    string alternateemail,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string countryid,
                    PhoneType[] phones,
                    double currentsalary,
                    bool currentsalarySpecified,
                    string currentsalaryunit,
                    double preferredsalary,
                    bool preferredsalarySpecified,
                    string preferredsalaryunit)
        {
            this.updateCandidateProfileAsync(clientid, username, password, candidateid, firstname, lastname, email, alternateemail, address1, address2, city, state, zipcode, countryid, phones, currentsalary, currentsalarySpecified, currentsalaryunit, preferredsalary, preferredsalarySpecified, preferredsalaryunit, null);
        }

        /// <remarks/>
        public void updateCandidateProfileAsync(
                    long clientid,
                    string username,
                    string password,
                    long candidateid,
                    string firstname,
                    string lastname,
                    string email,
                    string alternateemail,
                    string address1,
                    string address2,
                    string city,
                    string state,
                    string zipcode,
                    string countryid,
                    PhoneType[] phones,
                    double currentsalary,
                    bool currentsalarySpecified,
                    string currentsalaryunit,
                    double preferredsalary,
                    bool preferredsalarySpecified,
                    string preferredsalaryunit,
                    object userState)
        {
            if ((this.updateCandidateProfileOperationCompleted == null))
            {
                this.updateCandidateProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCandidateProfileOperationCompleted);
            }
            this.InvokeAsync("updateCandidateProfile", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        firstname,
                        lastname,
                        email,
                        alternateemail,
                        address1,
                        address2,
                        city,
                        state,
                        zipcode,
                        countryid,
                        phones,
                        currentsalary,
                        currentsalarySpecified,
                        currentsalaryunit,
                        preferredsalary,
                        preferredsalarySpecified,
                        preferredsalaryunit}, this.updateCandidateProfileOperationCompleted, userState);
        }

        private void OnupdateCandidateProfileOperationCompleted(object arg)
        {
            if ((this.updateCandidateProfileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCandidateProfileCompleted(this, new updateCandidateProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateCandidateUserfields", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateCandidateUserfields([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool overwrite, [System.Xml.Serialization.XmlElementAttribute("Userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] Userfields, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateCandidateUserfields", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        overwrite,
                        Userfields});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateCandidateUserfieldsAsync(long clientid, string username, string password, long candidateid, bool overwrite, UserfieldsType[] Userfields)
        {
            this.updateCandidateUserfieldsAsync(clientid, username, password, candidateid, overwrite, Userfields, null);
        }

        /// <remarks/>
        public void updateCandidateUserfieldsAsync(long clientid, string username, string password, long candidateid, bool overwrite, UserfieldsType[] Userfields, object userState)
        {
            if ((this.updateCandidateUserfieldsOperationCompleted == null))
            {
                this.updateCandidateUserfieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCandidateUserfieldsOperationCompleted);
            }
            this.InvokeAsync("updateCandidateUserfields", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        overwrite,
                        Userfields}, this.updateCandidateUserfieldsOperationCompleted, userState);
        }

        private void OnupdateCandidateUserfieldsOperationCompleted(object arg)
        {
            if ((this.updateCandidateUserfieldsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCandidateUserfieldsCompleted(this, new updateCandidateUserfieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateCandidateQualifications", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateCandidateQualifications([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool overwrite, [System.Xml.Serialization.XmlElementAttribute("Qualifications", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] QualificationType[] Qualifications, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateCandidateQualifications", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        overwrite,
                        Qualifications});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateCandidateQualificationsAsync(long clientid, string username, string password, long candidateid, bool overwrite, QualificationType[] Qualifications)
        {
            this.updateCandidateQualificationsAsync(clientid, username, password, candidateid, overwrite, Qualifications, null);
        }

        /// <remarks/>
        public void updateCandidateQualificationsAsync(long clientid, string username, string password, long candidateid, bool overwrite, QualificationType[] Qualifications, object userState)
        {
            if ((this.updateCandidateQualificationsOperationCompleted == null))
            {
                this.updateCandidateQualificationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCandidateQualificationsOperationCompleted);
            }
            this.InvokeAsync("updateCandidateQualifications", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        overwrite,
                        Qualifications}, this.updateCandidateQualificationsOperationCompleted, userState);
        }

        private void OnupdateCandidateQualificationsOperationCompleted(object arg)
        {
            if ((this.updateCandidateQualificationsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCandidateQualificationsCompleted(this, new updateCandidateQualificationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateCandidateAvailability", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateCandidateAvailability([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool availablenow, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool availablenowSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool unavailableindef, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool unavailableindefSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool unavailableuntil, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool unavailableuntilSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime unavailableuntildate, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool unavailableuntildateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string reason, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateCandidateAvailability", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        availablenow,
                        availablenowSpecified,
                        unavailableindef,
                        unavailableindefSpecified,
                        unavailableuntil,
                        unavailableuntilSpecified,
                        unavailableuntildate,
                        unavailableuntildateSpecified,
                        reason});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateCandidateAvailabilityAsync(long clientid, string username, string password, long candidateid, bool availablenow, bool availablenowSpecified, bool unavailableindef, bool unavailableindefSpecified, bool unavailableuntil, bool unavailableuntilSpecified, System.DateTime unavailableuntildate, bool unavailableuntildateSpecified, string reason)
        {
            this.updateCandidateAvailabilityAsync(clientid, username, password, candidateid, availablenow, availablenowSpecified, unavailableindef, unavailableindefSpecified, unavailableuntil, unavailableuntilSpecified, unavailableuntildate, unavailableuntildateSpecified, reason, null);
        }

        /// <remarks/>
        public void updateCandidateAvailabilityAsync(long clientid, string username, string password, long candidateid, bool availablenow, bool availablenowSpecified, bool unavailableindef, bool unavailableindefSpecified, bool unavailableuntil, bool unavailableuntilSpecified, System.DateTime unavailableuntildate, bool unavailableuntildateSpecified, string reason, object userState)
        {
            if ((this.updateCandidateAvailabilityOperationCompleted == null))
            {
                this.updateCandidateAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCandidateAvailabilityOperationCompleted);
            }
            this.InvokeAsync("updateCandidateAvailability", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        availablenow,
                        availablenowSpecified,
                        unavailableindef,
                        unavailableindefSpecified,
                        unavailableuntil,
                        unavailableuntilSpecified,
                        unavailableuntildate,
                        unavailableuntildateSpecified,
                        reason}, this.updateCandidateAvailabilityOperationCompleted, userState);
        }

        private void OnupdateCandidateAvailabilityOperationCompleted(object arg)
        {
            if ((this.updateCandidateAvailabilityCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCandidateAvailabilityCompleted(this, new updateCandidateAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateCandidateEmailMerge", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateCandidateEmailMerge([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool backonemailmerge, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backonemailmergeSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool requestoffemailindef, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool requestoffemailindefSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool requestoffemailuntil, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool requestoffemailuntilSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime requestoffemailuntildate, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool requestoffemailuntildateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string reason, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateCandidateEmailMerge", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        backonemailmerge,
                        backonemailmergeSpecified,
                        requestoffemailindef,
                        requestoffemailindefSpecified,
                        requestoffemailuntil,
                        requestoffemailuntilSpecified,
                        requestoffemailuntildate,
                        requestoffemailuntildateSpecified,
                        reason});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateCandidateEmailMergeAsync(long clientid, string username, string password, long candidateid, bool backonemailmerge, bool backonemailmergeSpecified, bool requestoffemailindef, bool requestoffemailindefSpecified, bool requestoffemailuntil, bool requestoffemailuntilSpecified, System.DateTime requestoffemailuntildate, bool requestoffemailuntildateSpecified, string reason)
        {
            this.updateCandidateEmailMergeAsync(clientid, username, password, candidateid, backonemailmerge, backonemailmergeSpecified, requestoffemailindef, requestoffemailindefSpecified, requestoffemailuntil, requestoffemailuntilSpecified, requestoffemailuntildate, requestoffemailuntildateSpecified, reason, null);
        }

        /// <remarks/>
        public void updateCandidateEmailMergeAsync(long clientid, string username, string password, long candidateid, bool backonemailmerge, bool backonemailmergeSpecified, bool requestoffemailindef, bool requestoffemailindefSpecified, bool requestoffemailuntil, bool requestoffemailuntilSpecified, System.DateTime requestoffemailuntildate, bool requestoffemailuntildateSpecified, string reason, object userState)
        {
            if ((this.updateCandidateEmailMergeOperationCompleted == null))
            {
                this.updateCandidateEmailMergeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCandidateEmailMergeOperationCompleted);
            }
            this.InvokeAsync("updateCandidateEmailMerge", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        backonemailmerge,
                        backonemailmergeSpecified,
                        requestoffemailindef,
                        requestoffemailindefSpecified,
                        requestoffemailuntil,
                        requestoffemailuntilSpecified,
                        requestoffemailuntildate,
                        requestoffemailuntildateSpecified,
                        reason}, this.updateCandidateEmailMergeOperationCompleted, userState);
        }

        private void OnupdateCandidateEmailMergeOperationCompleted(object arg)
        {
            if ((this.updateCandidateEmailMergeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCandidateEmailMergeCompleted(this, new updateCandidateEmailMergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createCandidateNote", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createCandidateNote([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string note, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long recruiterid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool recruiteridSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string action, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime actionDate, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool actionDateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long link2AnOpenJob, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool link2AnOpenJobSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long link2AContact, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool link2AContactSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("createCandidateNote", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        note,
                        recruiterid,
                        recruiteridSpecified,
                        action,
                        actionDate,
                        actionDateSpecified,
                        link2AnOpenJob,
                        link2AnOpenJobSpecified,
                        link2AContact,
                        link2AContactSpecified});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createCandidateNoteAsync(long clientid, string username, string password, long candidateid, string note, long recruiterid, bool recruiteridSpecified, string action, System.DateTime actionDate, bool actionDateSpecified, long link2AnOpenJob, bool link2AnOpenJobSpecified, long link2AContact, bool link2AContactSpecified)
        {
            this.createCandidateNoteAsync(clientid, username, password, candidateid, note, recruiterid, recruiteridSpecified, action, actionDate, actionDateSpecified, link2AnOpenJob, link2AnOpenJobSpecified, link2AContact, link2AContactSpecified, null);
        }

        /// <remarks/>
        public void createCandidateNoteAsync(long clientid, string username, string password, long candidateid, string note, long recruiterid, bool recruiteridSpecified, string action, System.DateTime actionDate, bool actionDateSpecified, long link2AnOpenJob, bool link2AnOpenJobSpecified, long link2AContact, bool link2AContactSpecified, object userState)
        {
            if ((this.createCandidateNoteOperationCompleted == null))
            {
                this.createCandidateNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCandidateNoteOperationCompleted);
            }
            this.InvokeAsync("createCandidateNote", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        note,
                        recruiterid,
                        recruiteridSpecified,
                        action,
                        actionDate,
                        actionDateSpecified,
                        link2AnOpenJob,
                        link2AnOpenJobSpecified,
                        link2AContact,
                        link2AContactSpecified}, this.createCandidateNoteOperationCompleted, userState);
        }

        private void OncreateCandidateNoteOperationCompleted(object arg)
        {
            if ((this.createCandidateNoteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCandidateNoteCompleted(this, new createCandidateNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createCandidateReference", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createCandidateReference([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long contactid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long createdByRecruiterid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long checkedByRecruiterid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool checkedByRecruiteridSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime dateChecked, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateCheckedSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string notes, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string standardQuestions, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("createCandidateReference", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        contactid,
                        createdByRecruiterid,
                        checkedByRecruiterid,
                        checkedByRecruiteridSpecified,
                        dateChecked,
                        dateCheckedSpecified,
                        notes,
                        standardQuestions});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createCandidateReferenceAsync(long clientid, string username, string password, long candidateid, long contactid, long createdByRecruiterid, long checkedByRecruiterid, bool checkedByRecruiteridSpecified, System.DateTime dateChecked, bool dateCheckedSpecified, string notes, string standardQuestions)
        {
            this.createCandidateReferenceAsync(clientid, username, password, candidateid, contactid, createdByRecruiterid, checkedByRecruiterid, checkedByRecruiteridSpecified, dateChecked, dateCheckedSpecified, notes, standardQuestions, null);
        }

        /// <remarks/>
        public void createCandidateReferenceAsync(long clientid, string username, string password, long candidateid, long contactid, long createdByRecruiterid, long checkedByRecruiterid, bool checkedByRecruiteridSpecified, System.DateTime dateChecked, bool dateCheckedSpecified, string notes, string standardQuestions, object userState)
        {
            if ((this.createCandidateReferenceOperationCompleted == null))
            {
                this.createCandidateReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCandidateReferenceOperationCompleted);
            }
            this.InvokeAsync("createCandidateReference", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        contactid,
                        createdByRecruiterid,
                        checkedByRecruiterid,
                        checkedByRecruiteridSpecified,
                        dateChecked,
                        dateCheckedSpecified,
                        notes,
                        standardQuestions}, this.createCandidateReferenceOperationCompleted, userState);
        }

        private void OncreateCandidateReferenceOperationCompleted(object arg)
        {
            if ((this.createCandidateReferenceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCandidateReferenceCompleted(this, new createCandidateReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/searchStart", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string searchStart([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool jobidSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string optionalref, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string jobdivaref, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool candidateidSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatefirstname, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatelastname, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidateemail, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out DataSet data)
        {
            object[] results = this.Invoke("searchStart", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        jobidSpecified,
                        optionalref,
                        jobdivaref,
                        candidateid,
                        candidateidSpecified,
                        candidatefirstname,
                        candidatelastname,
                        candidateemail});
            message = ((string)(results[1]));
            data = ((DataSet)(results[2]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void searchStartAsync(long clientid, string username, string password, long jobid, bool jobidSpecified, string optionalref, string jobdivaref, long candidateid, bool candidateidSpecified, string candidatefirstname, string candidatelastname, string candidateemail)
        {
            this.searchStartAsync(clientid, username, password, jobid, jobidSpecified, optionalref, jobdivaref, candidateid, candidateidSpecified, candidatefirstname, candidatelastname, candidateemail, null);
        }

        /// <remarks/>
        public void searchStartAsync(long clientid, string username, string password, long jobid, bool jobidSpecified, string optionalref, string jobdivaref, long candidateid, bool candidateidSpecified, string candidatefirstname, string candidatelastname, string candidateemail, object userState)
        {
            if ((this.searchStartOperationCompleted == null))
            {
                this.searchStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchStartOperationCompleted);
            }
            this.InvokeAsync("searchStart", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        jobidSpecified,
                        optionalref,
                        jobdivaref,
                        candidateid,
                        candidateidSpecified,
                        candidatefirstname,
                        candidatelastname,
                        candidateemail}, this.searchStartOperationCompleted, userState);
        }

        private void OnsearchStartOperationCompleted(object arg)
        {
            if ((this.searchStartCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchStartCompleted(this, new searchStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateStart", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateStart(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long startid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool overwrite,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime startdate,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool startdateSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime enddate,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool enddateSpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string positiontype,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double billrate,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool billrateSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string billratecurrency,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string billrateunit,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double payrate,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool payrateSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string payratecurrency,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string payrateunit,
                            [System.Xml.Serialization.XmlElementAttribute("userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] userfields,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateStart", new object[] {
                        clientid,
                        username,
                        password,
                        startid,
                        overwrite,
                        startdate,
                        startdateSpecified,
                        enddate,
                        enddateSpecified,
                        positiontype,
                        billrate,
                        billrateSpecified,
                        billratecurrency,
                        billrateunit,
                        payrate,
                        payrateSpecified,
                        payratecurrency,
                        payrateunit,
                        userfields});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateStartAsync(
                    long clientid,
                    string username,
                    string password,
                    long startid,
                    bool overwrite,
                    System.DateTime startdate,
                    bool startdateSpecified,
                    System.DateTime enddate,
                    bool enddateSpecified,
                    string positiontype,
                    double billrate,
                    bool billrateSpecified,
                    string billratecurrency,
                    string billrateunit,
                    double payrate,
                    bool payrateSpecified,
                    string payratecurrency,
                    string payrateunit,
                    UserfieldsType[] userfields)
        {
            this.updateStartAsync(clientid, username, password, startid, overwrite, startdate, startdateSpecified, enddate, enddateSpecified, positiontype, billrate, billrateSpecified, billratecurrency, billrateunit, payrate, payrateSpecified, payratecurrency, payrateunit, userfields, null);
        }

        /// <remarks/>
        public void updateStartAsync(
                    long clientid,
                    string username,
                    string password,
                    long startid,
                    bool overwrite,
                    System.DateTime startdate,
                    bool startdateSpecified,
                    System.DateTime enddate,
                    bool enddateSpecified,
                    string positiontype,
                    double billrate,
                    bool billrateSpecified,
                    string billratecurrency,
                    string billrateunit,
                    double payrate,
                    bool payrateSpecified,
                    string payratecurrency,
                    string payrateunit,
                    UserfieldsType[] userfields,
                    object userState)
        {
            if ((this.updateStartOperationCompleted == null))
            {
                this.updateStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateStartOperationCompleted);
            }
            this.InvokeAsync("updateStart", new object[] {
                        clientid,
                        username,
                        password,
                        startid,
                        overwrite,
                        startdate,
                        startdateSpecified,
                        enddate,
                        enddateSpecified,
                        positiontype,
                        billrate,
                        billrateSpecified,
                        billratecurrency,
                        billrateunit,
                        payrate,
                        payrateSpecified,
                        payratecurrency,
                        payrateunit,
                        userfields}, this.updateStartOperationCompleted, userState);
        }

        private void OnupdateStartOperationCompleted(object arg)
        {
            if ((this.updateStartCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateStartCompleted(this, new updateStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/saveTimeSheet", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string saveTimeSheet([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("saveTimeSheet", new object[] {
                        clientid,
                        username,
                        password,
                        xml});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void saveTimeSheetAsync(long clientid, string username, string password, string xml)
        {
            this.saveTimeSheetAsync(clientid, username, password, xml, null);
        }

        /// <remarks/>
        public void saveTimeSheetAsync(long clientid, string username, string password, string xml, object userState)
        {
            if ((this.saveTimeSheetOperationCompleted == null))
            {
                this.saveTimeSheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveTimeSheetOperationCompleted);
            }
            this.InvokeAsync("saveTimeSheet", new object[] {
                        clientid,
                        username,
                        password,
                        xml}, this.saveTimeSheetOperationCompleted, userState);
        }

        private void OnsaveTimeSheetOperationCompleted(object arg)
        {
            if ((this.saveTimeSheetCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveTimeSheetCompleted(this, new saveTimeSheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createBillingRecord", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool createBillingRecord([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] BillingRecord billingRecord, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out int recID, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool recIDSpecified)
        {
            object[] results = this.Invoke("createBillingRecord", new object[] {
                        clientid,
                        username,
                        password,
                        billingRecord});
            message = ((string)(results[1]));
            recID = ((int)(results[2]));
            recIDSpecified = ((bool)(results[3]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void createBillingRecordAsync(long clientid, string username, string password, BillingRecord billingRecord)
        {
            this.createBillingRecordAsync(clientid, username, password, billingRecord, null);
        }

        /// <remarks/>
        public void createBillingRecordAsync(long clientid, string username, string password, BillingRecord billingRecord, object userState)
        {
            if ((this.createBillingRecordOperationCompleted == null))
            {
                this.createBillingRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateBillingRecordOperationCompleted);
            }
            this.InvokeAsync("createBillingRecord", new object[] {
                        clientid,
                        username,
                        password,
                        billingRecord}, this.createBillingRecordOperationCompleted, userState);
        }

        private void OncreateBillingRecordOperationCompleted(object arg)
        {
            if ((this.createBillingRecordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createBillingRecordCompleted(this, new createBillingRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createPayRecord", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool createPayRecord([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] PayRecord payRecord, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out int recID, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool recIDSpecified)
        {
            object[] results = this.Invoke("createPayRecord", new object[] {
                        clientid,
                        username,
                        password,
                        payRecord});
            message = ((string)(results[1]));
            recID = ((int)(results[2]));
            recIDSpecified = ((bool)(results[3]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void createPayRecordAsync(long clientid, string username, string password, PayRecord payRecord)
        {
            this.createPayRecordAsync(clientid, username, password, payRecord, null);
        }

        /// <remarks/>
        public void createPayRecordAsync(long clientid, string username, string password, PayRecord payRecord, object userState)
        {
            if ((this.createPayRecordOperationCompleted == null))
            {
                this.createPayRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreatePayRecordOperationCompleted);
            }
            this.InvokeAsync("createPayRecord", new object[] {
                        clientid,
                        username,
                        password,
                        payRecord}, this.createPayRecordOperationCompleted, userState);
        }

        private void OncreatePayRecordOperationCompleted(object arg)
        {
            if ((this.createPayRecordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createPayRecordCompleted(this, new createPayRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateBillingRecord", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool updateBillingRecord([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] BillingRecord billingRecord, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateBillingRecord", new object[] {
                        clientid,
                        username,
                        password,
                        billingRecord});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void updateBillingRecordAsync(long clientid, string username, string password, BillingRecord billingRecord)
        {
            this.updateBillingRecordAsync(clientid, username, password, billingRecord, null);
        }

        /// <remarks/>
        public void updateBillingRecordAsync(long clientid, string username, string password, BillingRecord billingRecord, object userState)
        {
            if ((this.updateBillingRecordOperationCompleted == null))
            {
                this.updateBillingRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateBillingRecordOperationCompleted);
            }
            this.InvokeAsync("updateBillingRecord", new object[] {
                        clientid,
                        username,
                        password,
                        billingRecord}, this.updateBillingRecordOperationCompleted, userState);
        }

        private void OnupdateBillingRecordOperationCompleted(object arg)
        {
            if ((this.updateBillingRecordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateBillingRecordCompleted(this, new updateBillingRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updatePayRecord", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool updatePayRecord([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] PayRecord payRecord, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updatePayRecord", new object[] {
                        clientid,
                        username,
                        password,
                        payRecord});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void updatePayRecordAsync(long clientid, string username, string password, PayRecord payRecord)
        {
            this.updatePayRecordAsync(clientid, username, password, payRecord, null);
        }

        /// <remarks/>
        public void updatePayRecordAsync(long clientid, string username, string password, PayRecord payRecord, object userState)
        {
            if ((this.updatePayRecordOperationCompleted == null))
            {
                this.updatePayRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePayRecordOperationCompleted);
            }
            this.InvokeAsync("updatePayRecord", new object[] {
                        clientid,
                        username,
                        password,
                        payRecord}, this.updatePayRecordOperationCompleted, userState);
        }

        private void OnupdatePayRecordOperationCompleted(object arg)
        {
            if ((this.updatePayRecordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePayRecordCompleted(this, new updatePayRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/uploadResume", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string uploadResume([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string filename, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, DataType = "base64Binary")] byte[] filecontent, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string textfile, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] ref long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool candidateidSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int resumesource, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool resumesourceSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("uploadResume", new object[] {
                        clientid,
                        username,
                        password,
                        filename,
                        filecontent,
                        textfile,
                        candidateid,
                        candidateidSpecified,
                        resumesource,
                        resumesourceSpecified});
            candidateid = ((long)(results[1]));
            candidateidSpecified = ((bool)(results[2]));
            message = ((string)(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void uploadResumeAsync(long clientid, string username, string password, string filename, byte[] filecontent, string textfile, long candidateid, bool candidateidSpecified, int resumesource, bool resumesourceSpecified)
        {
            this.uploadResumeAsync(clientid, username, password, filename, filecontent, textfile, candidateid, candidateidSpecified, resumesource, resumesourceSpecified, null);
        }

        /// <remarks/>
        public void uploadResumeAsync(long clientid, string username, string password, string filename, byte[] filecontent, string textfile, long candidateid, bool candidateidSpecified, int resumesource, bool resumesourceSpecified, object userState)
        {
            if ((this.uploadResumeOperationCompleted == null))
            {
                this.uploadResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadResumeOperationCompleted);
            }
            this.InvokeAsync("uploadResume", new object[] {
                        clientid,
                        username,
                        password,
                        filename,
                        filecontent,
                        textfile,
                        candidateid,
                        candidateidSpecified,
                        resumesource,
                        resumesourceSpecified}, this.uploadResumeOperationCompleted, userState);
        }

        private void OnuploadResumeOperationCompleted(object arg)
        {
            if ((this.uploadResumeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadResumeCompleted(this, new uploadResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createJobApplication", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createJobApplication([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime dateapplied, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateappliedSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int resumesource, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool resumesourceSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string globalid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("createJobApplication", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        jobid,
                        dateapplied,
                        dateappliedSpecified,
                        resumesource,
                        resumesourceSpecified,
                        globalid});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createJobApplicationAsync(long clientid, string username, string password, long candidateid, long jobid, System.DateTime dateapplied, bool dateappliedSpecified, int resumesource, bool resumesourceSpecified, string globalid)
        {
            this.createJobApplicationAsync(clientid, username, password, candidateid, jobid, dateapplied, dateappliedSpecified, resumesource, resumesourceSpecified, globalid, null);
        }

        /// <remarks/>
        public void createJobApplicationAsync(long clientid, string username, string password, long candidateid, long jobid, System.DateTime dateapplied, bool dateappliedSpecified, int resumesource, bool resumesourceSpecified, string globalid, object userState)
        {
            if ((this.createJobApplicationOperationCompleted == null))
            {
                this.createJobApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateJobApplicationOperationCompleted);
            }
            this.InvokeAsync("createJobApplication", new object[] {
                        clientid,
                        username,
                        password,
                        candidateid,
                        jobid,
                        dateapplied,
                        dateappliedSpecified,
                        resumesource,
                        resumesourceSpecified,
                        globalid}, this.createJobApplicationOperationCompleted, userState);
        }

        private void OncreateJobApplicationOperationCompleted(object arg)
        {
            if ((this.createJobApplicationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createJobApplicationCompleted(this, new createJobApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/createSubmittal", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string createSubmittal(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int status,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool statusSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long submit2id,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime submittaldate,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string positiontype,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long recruitedbyid,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long primarysalesid,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string internalnotes,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double salary,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool salarySpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int feetype,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool feetypeSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double fee,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool feeSpecified,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double quotedbillrate,
                            [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool quotedbillrateSpecified,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double agreedbillrate,
                              [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool agreedbillrateSpecified,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] double payrate,
                                [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool payrateSpecified,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string payratecurrency,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string payrateunit,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] bool corp2corp,
                                  [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool corp2corpSpecified,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime agreedon,
                                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool agreedonSpecified,
                                      [System.Xml.Serialization.XmlElementAttribute("userfields", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] UserfieldsType[] userfields,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string filename,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, DataType = "base64Binary")] byte[] filecontent,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string textfile,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out long submittalid,
                                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool submittalidSpecified)
        {
            object[] results = this.Invoke("createSubmittal", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        candidateid,
                        status,
                        statusSpecified,
                        submit2id,
                        submittaldate,
                        positiontype,
                        recruitedbyid,
                        primarysalesid,
                        internalnotes,
                        salary,
                        salarySpecified,
                        feetype,
                        feetypeSpecified,
                        fee,
                        feeSpecified,
                        quotedbillrate,
                        quotedbillrateSpecified,
                        agreedbillrate,
                        agreedbillrateSpecified,
                        payrate,
                        payrateSpecified,
                        payratecurrency,
                        payrateunit,
                        corp2corp,
                        corp2corpSpecified,
                        agreedon,
                        agreedonSpecified,
                        userfields,
                        filename,
                        filecontent,
                        textfile});
            message = ((string)(results[1]));
            submittalid = ((long)(results[2]));
            submittalidSpecified = ((bool)(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void createSubmittalAsync(
                    long clientid,
                    string username,
                    string password,
                    long jobid,
                    long candidateid,
                    int status,
                    bool statusSpecified,
                    long submit2id,
                    System.DateTime submittaldate,
                    string positiontype,
                    long recruitedbyid,
                    long primarysalesid,
                    string internalnotes,
                    double salary,
                    bool salarySpecified,
                    int feetype,
                    bool feetypeSpecified,
                    double fee,
                    bool feeSpecified,
                    double quotedbillrate,
                    bool quotedbillrateSpecified,
                    double agreedbillrate,
                    bool agreedbillrateSpecified,
                    double payrate,
                    bool payrateSpecified,
                    string payratecurrency,
                    string payrateunit,
                    bool corp2corp,
                    bool corp2corpSpecified,
                    System.DateTime agreedon,
                    bool agreedonSpecified,
                    UserfieldsType[] userfields,
                    string filename,
                    byte[] filecontent,
                    string textfile)
        {
            this.createSubmittalAsync(clientid, username, password, jobid, candidateid, status, statusSpecified, submit2id, submittaldate, positiontype, recruitedbyid, primarysalesid, internalnotes, salary, salarySpecified, feetype, feetypeSpecified, fee, feeSpecified, quotedbillrate, quotedbillrateSpecified, agreedbillrate, agreedbillrateSpecified, payrate, payrateSpecified, payratecurrency, payrateunit, corp2corp, corp2corpSpecified, agreedon, agreedonSpecified, userfields, filename, filecontent, textfile, null);
        }

        /// <remarks/>
        public void createSubmittalAsync(
                    long clientid,
                    string username,
                    string password,
                    long jobid,
                    long candidateid,
                    int status,
                    bool statusSpecified,
                    long submit2id,
                    System.DateTime submittaldate,
                    string positiontype,
                    long recruitedbyid,
                    long primarysalesid,
                    string internalnotes,
                    double salary,
                    bool salarySpecified,
                    int feetype,
                    bool feetypeSpecified,
                    double fee,
                    bool feeSpecified,
                    double quotedbillrate,
                    bool quotedbillrateSpecified,
                    double agreedbillrate,
                    bool agreedbillrateSpecified,
                    double payrate,
                    bool payrateSpecified,
                    string payratecurrency,
                    string payrateunit,
                    bool corp2corp,
                    bool corp2corpSpecified,
                    System.DateTime agreedon,
                    bool agreedonSpecified,
                    UserfieldsType[] userfields,
                    string filename,
                    byte[] filecontent,
                    string textfile,
                    object userState)
        {
            if ((this.createSubmittalOperationCompleted == null))
            {
                this.createSubmittalOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateSubmittalOperationCompleted);
            }
            this.InvokeAsync("createSubmittal", new object[] {
                        clientid,
                        username,
                        password,
                        jobid,
                        candidateid,
                        status,
                        statusSpecified,
                        submit2id,
                        submittaldate,
                        positiontype,
                        recruitedbyid,
                        primarysalesid,
                        internalnotes,
                        salary,
                        salarySpecified,
                        feetype,
                        feetypeSpecified,
                        fee,
                        feeSpecified,
                        quotedbillrate,
                        quotedbillrateSpecified,
                        agreedbillrate,
                        agreedbillrateSpecified,
                        payrate,
                        payrateSpecified,
                        payratecurrency,
                        payrateunit,
                        corp2corp,
                        corp2corpSpecified,
                        agreedon,
                        agreedonSpecified,
                        userfields,
                        filename,
                        filecontent,
                        textfile}, this.createSubmittalOperationCompleted, userState);
        }

        private void OncreateSubmittalOperationCompleted(object arg)
        {
            if ((this.createSubmittalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createSubmittalCompleted(this, new createSubmittalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/searchSubmittal", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string searchSubmittal(
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long submittalid,
                    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool submittalidSpecified,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long jobid,
                      [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool jobidSpecified,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string joboptionalref,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string companyname,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long candidateid,
                        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool candidateidSpecified,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatefirstname,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatelastname,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidateemail,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatephone,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatecity,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string candidatestate,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message,
                          [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out DataSet data)
        {
            object[] results = this.Invoke("searchSubmittal", new object[] {
                        clientid,
                        username,
                        password,
                        submittalid,
                        submittalidSpecified,
                        jobid,
                        jobidSpecified,
                        joboptionalref,
                        companyname,
                        candidateid,
                        candidateidSpecified,
                        candidatefirstname,
                        candidatelastname,
                        candidateemail,
                        candidatephone,
                        candidatecity,
                        candidatestate});
            message = ((string)(results[1]));
            data = ((DataSet)(results[2]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void searchSubmittalAsync(
                    long clientid,
                    string username,
                    string password,
                    long submittalid,
                    bool submittalidSpecified,
                    long jobid,
                    bool jobidSpecified,
                    string joboptionalref,
                    string companyname,
                    long candidateid,
                    bool candidateidSpecified,
                    string candidatefirstname,
                    string candidatelastname,
                    string candidateemail,
                    string candidatephone,
                    string candidatecity,
                    string candidatestate)
        {
            this.searchSubmittalAsync(clientid, username, password, submittalid, submittalidSpecified, jobid, jobidSpecified, joboptionalref, companyname, candidateid, candidateidSpecified, candidatefirstname, candidatelastname, candidateemail, candidatephone, candidatecity, candidatestate, null);
        }

        /// <remarks/>
        public void searchSubmittalAsync(
                    long clientid,
                    string username,
                    string password,
                    long submittalid,
                    bool submittalidSpecified,
                    long jobid,
                    bool jobidSpecified,
                    string joboptionalref,
                    string companyname,
                    long candidateid,
                    bool candidateidSpecified,
                    string candidatefirstname,
                    string candidatelastname,
                    string candidateemail,
                    string candidatephone,
                    string candidatecity,
                    string candidatestate,
                    object userState)
        {
            if ((this.searchSubmittalOperationCompleted == null))
            {
                this.searchSubmittalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchSubmittalOperationCompleted);
            }
            this.InvokeAsync("searchSubmittal", new object[] {
                        clientid,
                        username,
                        password,
                        submittalid,
                        submittalidSpecified,
                        jobid,
                        jobidSpecified,
                        joboptionalref,
                        companyname,
                        candidateid,
                        candidateidSpecified,
                        candidatefirstname,
                        candidatelastname,
                        candidateemail,
                        candidatephone,
                        candidatecity,
                        candidatestate}, this.searchSubmittalOperationCompleted, userState);
        }

        private void OnsearchSubmittalOperationCompleted(object arg)
        {
            if ((this.searchSubmittalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchSubmittalCompleted(this, new searchSubmittalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.jobdiva.com/JobDivaAPI/updateSubmittal", RequestNamespace = "http://ws.jobdiva.com/JobDivaAPI/", ResponseNamespace = "http://ws.jobdiva.com/JobDivaAPI/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string updateSubmittal([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long clientid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] long submittalid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int submittalstatus, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool submittalstatusSpecified, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string internalnotes, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] out string message)
        {
            object[] results = this.Invoke("updateSubmittal", new object[] {
                        clientid,
                        username,
                        password,
                        submittalid,
                        submittalstatus,
                        submittalstatusSpecified,
                        internalnotes});
            message = ((string)(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updateSubmittalAsync(long clientid, string username, string password, long submittalid, int submittalstatus, bool submittalstatusSpecified, string internalnotes)
        {
            this.updateSubmittalAsync(clientid, username, password, submittalid, submittalstatus, submittalstatusSpecified, internalnotes, null);
        }

        /// <remarks/>
        public void updateSubmittalAsync(long clientid, string username, string password, long submittalid, int submittalstatus, bool submittalstatusSpecified, string internalnotes, object userState)
        {
            if ((this.updateSubmittalOperationCompleted == null))
            {
                this.updateSubmittalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSubmittalOperationCompleted);
            }
            this.InvokeAsync("updateSubmittal", new object[] {
                        clientid,
                        username,
                        password,
                        submittalid,
                        submittalstatus,
                        submittalstatusSpecified,
                        internalnotes}, this.updateSubmittalOperationCompleted, userState);
        }

        private void OnupdateSubmittalOperationCompleted(object arg)
        {
            if ((this.updateSubmittalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSubmittalCompleted(this, new updateSubmittalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class DataSet
    {

        private string[] columnsField;

        private Pair[] rowField;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Column", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] Columns
        {
            get
            {
                return this.columnsField;
            }
            set
            {
                this.columnsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("RowData", typeof(Pair), Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public Pair[] Row
        {
            get
            {
                return this.rowField;
            }
            set
            {
                this.rowField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class Pair
    {

        private string nameField;

        private string valueField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class PayRecord
    {

        private long candidateIDField;

        private long assignmentIDField;

        private bool assignmentIDFieldSpecified;

        private long jobIDField;

        private bool jobIDFieldSpecified;

        private int recordIDField;

        private bool recordIDFieldSpecified;

        private bool approvedField;

        private bool approvedFieldSpecified;

        private long createdByIDField;

        private bool createdByIDFieldSpecified;

        private System.DateTime effectiveDateField;

        private System.DateTime endDateField;

        private bool endDateFieldSpecified;

        private int statusField;

        private string taxIDField;

        private string paymentTermsField;

        private long subcontractCompanyIDField;

        private bool subcontractCompanyIDFieldSpecified;

        private bool payOnRemittanceField;

        private bool payOnRemittanceFieldSpecified;

        private double salaryField;

        private string salaryPerField;

        private double perDiemField;

        private bool perDiemFieldSpecified;

        private string perDiemPerField;

        private double otherExpensesField;

        private bool otherExpensesFieldSpecified;

        private string otherExpensesPerField;

        private double outsideCommissionField;

        private bool outsideCommissionFieldSpecified;

        private string outsideCommissionPerField;

        private double overtimeRateField;

        private bool overtimeRateFieldSpecified;

        private string overtimeRatePerField;

        private double doubletimeRateField;

        private bool doubletimeRateFieldSpecified;

        private string doubletimeRatePerField;

        private bool overtimeExemptField;

        private bool overtimeExemptFieldSpecified;

        private string fileNoField;

        private string aDPCOCODEField;

        private string aDPPAYFREQUENCYField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CandidateID
        {
            get
            {
                return this.candidateIDField;
            }
            set
            {
                this.candidateIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long AssignmentID
        {
            get
            {
                return this.assignmentIDField;
            }
            set
            {
                this.assignmentIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssignmentIDSpecified
        {
            get
            {
                return this.assignmentIDFieldSpecified;
            }
            set
            {
                this.assignmentIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long JobID
        {
            get
            {
                return this.jobIDField;
            }
            set
            {
                this.jobIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JobIDSpecified
        {
            get
            {
                return this.jobIDFieldSpecified;
            }
            set
            {
                this.jobIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RecordID
        {
            get
            {
                return this.recordIDField;
            }
            set
            {
                this.recordIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RecordIDSpecified
        {
            get
            {
                return this.recordIDFieldSpecified;
            }
            set
            {
                this.recordIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Approved
        {
            get
            {
                return this.approvedField;
            }
            set
            {
                this.approvedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApprovedSpecified
        {
            get
            {
                return this.approvedFieldSpecified;
            }
            set
            {
                this.approvedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CreatedByID
        {
            get
            {
                return this.createdByIDField;
            }
            set
            {
                this.createdByIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedByIDSpecified
        {
            get
            {
                return this.createdByIDFieldSpecified;
            }
            set
            {
                this.createdByIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime EffectiveDate
        {
            get
            {
                return this.effectiveDateField;
            }
            set
            {
                this.effectiveDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime EndDate
        {
            get
            {
                return this.endDateField;
            }
            set
            {
                this.endDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified
        {
            get
            {
                return this.endDateFieldSpecified;
            }
            set
            {
                this.endDateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TaxID
        {
            get
            {
                return this.taxIDField;
            }
            set
            {
                this.taxIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PaymentTerms
        {
            get
            {
                return this.paymentTermsField;
            }
            set
            {
                this.paymentTermsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SubcontractCompanyID
        {
            get
            {
                return this.subcontractCompanyIDField;
            }
            set
            {
                this.subcontractCompanyIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubcontractCompanyIDSpecified
        {
            get
            {
                return this.subcontractCompanyIDFieldSpecified;
            }
            set
            {
                this.subcontractCompanyIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool PayOnRemittance
        {
            get
            {
                return this.payOnRemittanceField;
            }
            set
            {
                this.payOnRemittanceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PayOnRemittanceSpecified
        {
            get
            {
                return this.payOnRemittanceFieldSpecified;
            }
            set
            {
                this.payOnRemittanceFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double Salary
        {
            get
            {
                return this.salaryField;
            }
            set
            {
                this.salaryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SalaryPer
        {
            get
            {
                return this.salaryPerField;
            }
            set
            {
                this.salaryPerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double PerDiem
        {
            get
            {
                return this.perDiemField;
            }
            set
            {
                this.perDiemField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PerDiemSpecified
        {
            get
            {
                return this.perDiemFieldSpecified;
            }
            set
            {
                this.perDiemFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PerDiemPer
        {
            get
            {
                return this.perDiemPerField;
            }
            set
            {
                this.perDiemPerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double OtherExpenses
        {
            get
            {
                return this.otherExpensesField;
            }
            set
            {
                this.otherExpensesField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherExpensesSpecified
        {
            get
            {
                return this.otherExpensesFieldSpecified;
            }
            set
            {
                this.otherExpensesFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OtherExpensesPer
        {
            get
            {
                return this.otherExpensesPerField;
            }
            set
            {
                this.otherExpensesPerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double OutsideCommission
        {
            get
            {
                return this.outsideCommissionField;
            }
            set
            {
                this.outsideCommissionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OutsideCommissionSpecified
        {
            get
            {
                return this.outsideCommissionFieldSpecified;
            }
            set
            {
                this.outsideCommissionFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OutsideCommissionPer
        {
            get
            {
                return this.outsideCommissionPerField;
            }
            set
            {
                this.outsideCommissionPerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double OvertimeRate
        {
            get
            {
                return this.overtimeRateField;
            }
            set
            {
                this.overtimeRateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OvertimeRateSpecified
        {
            get
            {
                return this.overtimeRateFieldSpecified;
            }
            set
            {
                this.overtimeRateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OvertimeRatePer
        {
            get
            {
                return this.overtimeRatePerField;
            }
            set
            {
                this.overtimeRatePerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double DoubletimeRate
        {
            get
            {
                return this.doubletimeRateField;
            }
            set
            {
                this.doubletimeRateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoubletimeRateSpecified
        {
            get
            {
                return this.doubletimeRateFieldSpecified;
            }
            set
            {
                this.doubletimeRateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DoubletimeRatePer
        {
            get
            {
                return this.doubletimeRatePerField;
            }
            set
            {
                this.doubletimeRatePerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool OvertimeExempt
        {
            get
            {
                return this.overtimeExemptField;
            }
            set
            {
                this.overtimeExemptField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OvertimeExemptSpecified
        {
            get
            {
                return this.overtimeExemptFieldSpecified;
            }
            set
            {
                this.overtimeExemptFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FileNo
        {
            get
            {
                return this.fileNoField;
            }
            set
            {
                this.fileNoField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ADPCOCODE
        {
            get
            {
                return this.aDPCOCODEField;
            }
            set
            {
                this.aDPCOCODEField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ADPPAYFREQUENCY
        {
            get
            {
                return this.aDPPAYFREQUENCYField;
            }
            set
            {
                this.aDPPAYFREQUENCYField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class BillingRecord
    {

        private long candidateIDField;

        private long assignmentIDField;

        private bool assignmentIDFieldSpecified;

        private long jobIDField;

        private bool jobIDFieldSpecified;

        private int recordIDField;

        private bool recordIDFieldSpecified;

        private long createdByIDField;

        private bool createdByIDFieldSpecified;

        private bool approvedField;

        private bool approvedFieldSpecified;

        private System.DateTime startDateField;

        private System.DateTime endDateField;

        private bool endDateFieldSpecified;

        private string customerRefNoField;

        private long hiringManagerIDField;

        private bool hiringManagerIDFieldSpecified;

        private long billingContactIDField;

        private long divisionField;

        private bool divisionFieldSpecified;

        private int invoiceGroupIndexField;

        private bool invoiceGroupIndexFieldSpecified;

        private string invoiceGroupField;

        private string vMSWebsiteField;

        private string vMSEmployeeNameField;

        private int invoiceContentField;

        private bool invoiceContentFieldSpecified;

        private int expenseInvoicesField;

        private bool expenseInvoicesFieldSpecified;

        private bool enableTimesheetField;

        private bool enableTimesheetFieldSpecified;

        private bool allowEnterTimeOnPortalField;

        private bool allowEnterTimeOnPortalFieldSpecified;

        private string timesheetInstructionField;

        private bool expenseEnabledField;

        private bool expenseEnabledFieldSpecified;

        private double billRateField;

        private string billRatePerField;

        private bool overtimeExemptField;

        private bool overtimeExemptFieldSpecified;

        private long timesheetEntryFormatField;

        private bool timesheetEntryFormatFieldSpecified;

        private int frequencyField;

        private int overtimeByWorkingStateField;

        private bool overtimeByWorkingStateFieldSpecified;

        private double overtimeRateField;

        private bool overtimeRateFieldSpecified;

        private string overtimeRatePerField;

        private double doubletimeRateField;

        private bool doubletimeRateFieldSpecified;

        private string doubletimePerField;

        private int billingUnitField;

        private int weekEndingField;

        private double hoursPerDayField;

        private double hoursPerHalfDayField;

        private bool hoursPerHalfDayFieldSpecified;

        private string workAddress1Field;

        private string workAddress2Field;

        private string workCityField;

        private string workStateField;

        private string workZipcodeField;

        private string workCountryField;

        private string paymentTermsField;

        private long primarySalesPersonIDField;

        private double primarySalesPercentageField;

        private bool primarySalesPercentageFieldSpecified;

        private long secondarySalesPersonIDField;

        private bool secondarySalesPersonIDFieldSpecified;

        private double secondarySalesPercentageField;

        private bool secondarySalesPercentageFieldSpecified;

        private long tertiarySalesPersonIDField;

        private bool tertiarySalesPersonIDFieldSpecified;

        private double tertiarySalesPercentageField;

        private bool tertiarySalesPercentageFieldSpecified;

        private long primaryRecruiterIDField;

        private bool primaryRecruiterIDFieldSpecified;

        private double primaryRecruiterPercentageField;

        private bool primaryRecruiterPercentageFieldSpecified;

        private long secondaryRecruiterIDField;

        private bool secondaryRecruiterIDFieldSpecified;

        private double secondaryRecruiterPercentageField;

        private bool secondaryRecruiterPercentageFieldSpecified;

        private long tertiaryRecruiterIDField;

        private bool tertiaryRecruiterIDFieldSpecified;

        private double tertiaryRecruiterPercentageField;

        private bool tertiaryRecruiterPercentageFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CandidateID
        {
            get
            {
                return this.candidateIDField;
            }
            set
            {
                this.candidateIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long AssignmentID
        {
            get
            {
                return this.assignmentIDField;
            }
            set
            {
                this.assignmentIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssignmentIDSpecified
        {
            get
            {
                return this.assignmentIDFieldSpecified;
            }
            set
            {
                this.assignmentIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long JobID
        {
            get
            {
                return this.jobIDField;
            }
            set
            {
                this.jobIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JobIDSpecified
        {
            get
            {
                return this.jobIDFieldSpecified;
            }
            set
            {
                this.jobIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RecordID
        {
            get
            {
                return this.recordIDField;
            }
            set
            {
                this.recordIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RecordIDSpecified
        {
            get
            {
                return this.recordIDFieldSpecified;
            }
            set
            {
                this.recordIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CreatedByID
        {
            get
            {
                return this.createdByIDField;
            }
            set
            {
                this.createdByIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedByIDSpecified
        {
            get
            {
                return this.createdByIDFieldSpecified;
            }
            set
            {
                this.createdByIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Approved
        {
            get
            {
                return this.approvedField;
            }
            set
            {
                this.approvedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApprovedSpecified
        {
            get
            {
                return this.approvedFieldSpecified;
            }
            set
            {
                this.approvedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime StartDate
        {
            get
            {
                return this.startDateField;
            }
            set
            {
                this.startDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime EndDate
        {
            get
            {
                return this.endDateField;
            }
            set
            {
                this.endDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified
        {
            get
            {
                return this.endDateFieldSpecified;
            }
            set
            {
                this.endDateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CustomerRefNo
        {
            get
            {
                return this.customerRefNoField;
            }
            set
            {
                this.customerRefNoField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long HiringManagerID
        {
            get
            {
                return this.hiringManagerIDField;
            }
            set
            {
                this.hiringManagerIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HiringManagerIDSpecified
        {
            get
            {
                return this.hiringManagerIDFieldSpecified;
            }
            set
            {
                this.hiringManagerIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long BillingContactID
        {
            get
            {
                return this.billingContactIDField;
            }
            set
            {
                this.billingContactIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Division
        {
            get
            {
                return this.divisionField;
            }
            set
            {
                this.divisionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionSpecified
        {
            get
            {
                return this.divisionFieldSpecified;
            }
            set
            {
                this.divisionFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int InvoiceGroupIndex
        {
            get
            {
                return this.invoiceGroupIndexField;
            }
            set
            {
                this.invoiceGroupIndexField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvoiceGroupIndexSpecified
        {
            get
            {
                return this.invoiceGroupIndexFieldSpecified;
            }
            set
            {
                this.invoiceGroupIndexFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InvoiceGroup
        {
            get
            {
                return this.invoiceGroupField;
            }
            set
            {
                this.invoiceGroupField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VMSWebsite
        {
            get
            {
                return this.vMSWebsiteField;
            }
            set
            {
                this.vMSWebsiteField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VMSEmployeeName
        {
            get
            {
                return this.vMSEmployeeNameField;
            }
            set
            {
                this.vMSEmployeeNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int InvoiceContent
        {
            get
            {
                return this.invoiceContentField;
            }
            set
            {
                this.invoiceContentField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvoiceContentSpecified
        {
            get
            {
                return this.invoiceContentFieldSpecified;
            }
            set
            {
                this.invoiceContentFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ExpenseInvoices
        {
            get
            {
                return this.expenseInvoicesField;
            }
            set
            {
                this.expenseInvoicesField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExpenseInvoicesSpecified
        {
            get
            {
                return this.expenseInvoicesFieldSpecified;
            }
            set
            {
                this.expenseInvoicesFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool EnableTimesheet
        {
            get
            {
                return this.enableTimesheetField;
            }
            set
            {
                this.enableTimesheetField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnableTimesheetSpecified
        {
            get
            {
                return this.enableTimesheetFieldSpecified;
            }
            set
            {
                this.enableTimesheetFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool AllowEnterTimeOnPortal
        {
            get
            {
                return this.allowEnterTimeOnPortalField;
            }
            set
            {
                this.allowEnterTimeOnPortalField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowEnterTimeOnPortalSpecified
        {
            get
            {
                return this.allowEnterTimeOnPortalFieldSpecified;
            }
            set
            {
                this.allowEnterTimeOnPortalFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TimesheetInstruction
        {
            get
            {
                return this.timesheetInstructionField;
            }
            set
            {
                this.timesheetInstructionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ExpenseEnabled
        {
            get
            {
                return this.expenseEnabledField;
            }
            set
            {
                this.expenseEnabledField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExpenseEnabledSpecified
        {
            get
            {
                return this.expenseEnabledFieldSpecified;
            }
            set
            {
                this.expenseEnabledFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double BillRate
        {
            get
            {
                return this.billRateField;
            }
            set
            {
                this.billRateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BillRatePer
        {
            get
            {
                return this.billRatePerField;
            }
            set
            {
                this.billRatePerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool OvertimeExempt
        {
            get
            {
                return this.overtimeExemptField;
            }
            set
            {
                this.overtimeExemptField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OvertimeExemptSpecified
        {
            get
            {
                return this.overtimeExemptFieldSpecified;
            }
            set
            {
                this.overtimeExemptFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long TimesheetEntryFormat
        {
            get
            {
                return this.timesheetEntryFormatField;
            }
            set
            {
                this.timesheetEntryFormatField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimesheetEntryFormatSpecified
        {
            get
            {
                return this.timesheetEntryFormatFieldSpecified;
            }
            set
            {
                this.timesheetEntryFormatFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Frequency
        {
            get
            {
                return this.frequencyField;
            }
            set
            {
                this.frequencyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int OvertimeByWorkingState
        {
            get
            {
                return this.overtimeByWorkingStateField;
            }
            set
            {
                this.overtimeByWorkingStateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OvertimeByWorkingStateSpecified
        {
            get
            {
                return this.overtimeByWorkingStateFieldSpecified;
            }
            set
            {
                this.overtimeByWorkingStateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double OvertimeRate
        {
            get
            {
                return this.overtimeRateField;
            }
            set
            {
                this.overtimeRateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OvertimeRateSpecified
        {
            get
            {
                return this.overtimeRateFieldSpecified;
            }
            set
            {
                this.overtimeRateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OvertimeRatePer
        {
            get
            {
                return this.overtimeRatePerField;
            }
            set
            {
                this.overtimeRatePerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double DoubletimeRate
        {
            get
            {
                return this.doubletimeRateField;
            }
            set
            {
                this.doubletimeRateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoubletimeRateSpecified
        {
            get
            {
                return this.doubletimeRateFieldSpecified;
            }
            set
            {
                this.doubletimeRateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DoubletimePer
        {
            get
            {
                return this.doubletimePerField;
            }
            set
            {
                this.doubletimePerField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int BillingUnit
        {
            get
            {
                return this.billingUnitField;
            }
            set
            {
                this.billingUnitField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int WeekEnding
        {
            get
            {
                return this.weekEndingField;
            }
            set
            {
                this.weekEndingField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double HoursPerDay
        {
            get
            {
                return this.hoursPerDayField;
            }
            set
            {
                this.hoursPerDayField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double HoursPerHalfDay
        {
            get
            {
                return this.hoursPerHalfDayField;
            }
            set
            {
                this.hoursPerHalfDayField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HoursPerHalfDaySpecified
        {
            get
            {
                return this.hoursPerHalfDayFieldSpecified;
            }
            set
            {
                this.hoursPerHalfDayFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string WorkAddress1
        {
            get
            {
                return this.workAddress1Field;
            }
            set
            {
                this.workAddress1Field = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string WorkAddress2
        {
            get
            {
                return this.workAddress2Field;
            }
            set
            {
                this.workAddress2Field = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string WorkCity
        {
            get
            {
                return this.workCityField;
            }
            set
            {
                this.workCityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string WorkState
        {
            get
            {
                return this.workStateField;
            }
            set
            {
                this.workStateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string WorkZipcode
        {
            get
            {
                return this.workZipcodeField;
            }
            set
            {
                this.workZipcodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string WorkCountry
        {
            get
            {
                return this.workCountryField;
            }
            set
            {
                this.workCountryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PaymentTerms
        {
            get
            {
                return this.paymentTermsField;
            }
            set
            {
                this.paymentTermsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PrimarySalesPersonID
        {
            get
            {
                return this.primarySalesPersonIDField;
            }
            set
            {
                this.primarySalesPersonIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double PrimarySalesPercentage
        {
            get
            {
                return this.primarySalesPercentageField;
            }
            set
            {
                this.primarySalesPercentageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrimarySalesPercentageSpecified
        {
            get
            {
                return this.primarySalesPercentageFieldSpecified;
            }
            set
            {
                this.primarySalesPercentageFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SecondarySalesPersonID
        {
            get
            {
                return this.secondarySalesPersonIDField;
            }
            set
            {
                this.secondarySalesPersonIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondarySalesPersonIDSpecified
        {
            get
            {
                return this.secondarySalesPersonIDFieldSpecified;
            }
            set
            {
                this.secondarySalesPersonIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double SecondarySalesPercentage
        {
            get
            {
                return this.secondarySalesPercentageField;
            }
            set
            {
                this.secondarySalesPercentageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondarySalesPercentageSpecified
        {
            get
            {
                return this.secondarySalesPercentageFieldSpecified;
            }
            set
            {
                this.secondarySalesPercentageFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long TertiarySalesPersonID
        {
            get
            {
                return this.tertiarySalesPersonIDField;
            }
            set
            {
                this.tertiarySalesPersonIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TertiarySalesPersonIDSpecified
        {
            get
            {
                return this.tertiarySalesPersonIDFieldSpecified;
            }
            set
            {
                this.tertiarySalesPersonIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double TertiarySalesPercentage
        {
            get
            {
                return this.tertiarySalesPercentageField;
            }
            set
            {
                this.tertiarySalesPercentageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TertiarySalesPercentageSpecified
        {
            get
            {
                return this.tertiarySalesPercentageFieldSpecified;
            }
            set
            {
                this.tertiarySalesPercentageFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PrimaryRecruiterID
        {
            get
            {
                return this.primaryRecruiterIDField;
            }
            set
            {
                this.primaryRecruiterIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrimaryRecruiterIDSpecified
        {
            get
            {
                return this.primaryRecruiterIDFieldSpecified;
            }
            set
            {
                this.primaryRecruiterIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double PrimaryRecruiterPercentage
        {
            get
            {
                return this.primaryRecruiterPercentageField;
            }
            set
            {
                this.primaryRecruiterPercentageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrimaryRecruiterPercentageSpecified
        {
            get
            {
                return this.primaryRecruiterPercentageFieldSpecified;
            }
            set
            {
                this.primaryRecruiterPercentageFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SecondaryRecruiterID
        {
            get
            {
                return this.secondaryRecruiterIDField;
            }
            set
            {
                this.secondaryRecruiterIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondaryRecruiterIDSpecified
        {
            get
            {
                return this.secondaryRecruiterIDFieldSpecified;
            }
            set
            {
                this.secondaryRecruiterIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double SecondaryRecruiterPercentage
        {
            get
            {
                return this.secondaryRecruiterPercentageField;
            }
            set
            {
                this.secondaryRecruiterPercentageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondaryRecruiterPercentageSpecified
        {
            get
            {
                return this.secondaryRecruiterPercentageFieldSpecified;
            }
            set
            {
                this.secondaryRecruiterPercentageFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long TertiaryRecruiterID
        {
            get
            {
                return this.tertiaryRecruiterIDField;
            }
            set
            {
                this.tertiaryRecruiterIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TertiaryRecruiterIDSpecified
        {
            get
            {
                return this.tertiaryRecruiterIDFieldSpecified;
            }
            set
            {
                this.tertiaryRecruiterIDFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double TertiaryRecruiterPercentage
        {
            get
            {
                return this.tertiaryRecruiterPercentageField;
            }
            set
            {
                this.tertiaryRecruiterPercentageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TertiaryRecruiterPercentageSpecified
        {
            get
            {
                return this.tertiaryRecruiterPercentageFieldSpecified;
            }
            set
            {
                this.tertiaryRecruiterPercentageFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class TitleSkillCertificationType
    {

        private string titleskillcertificationField;

        private System.DateTime startdateField;

        private bool startdateFieldSpecified;

        private System.DateTime enddateField;

        private bool enddateFieldSpecified;

        private int yearsField;

        private bool yearsFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string titleskillcertification
        {
            get
            {
                return this.titleskillcertificationField;
            }
            set
            {
                this.titleskillcertificationField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime startdate
        {
            get
            {
                return this.startdateField;
            }
            set
            {
                this.startdateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startdateSpecified
        {
            get
            {
                return this.startdateFieldSpecified;
            }
            set
            {
                this.startdateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime enddate
        {
            get
            {
                return this.enddateField;
            }
            set
            {
                this.enddateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool enddateSpecified
        {
            get
            {
                return this.enddateFieldSpecified;
            }
            set
            {
                this.enddateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int years
        {
            get
            {
                return this.yearsField;
            }
            set
            {
                this.yearsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool yearsSpecified
        {
            get
            {
                return this.yearsFieldSpecified;
            }
            set
            {
                this.yearsFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class QualificationType
    {

        private int qulificationtypeidField;

        private string qulificationvalueField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int qulificationtypeid
        {
            get
            {
                return this.qulificationtypeidField;
            }
            set
            {
                this.qulificationtypeidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string qulificationvalue
        {
            get
            {
                return this.qulificationvalueField;
            }
            set
            {
                this.qulificationvalueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class Attachment
    {

        private string filenameField;

        private string filedataField;

        private string descriptionField;

        private string filetypeField;

        private long fileidField;

        private bool fileidFieldSpecified;

        private long entityidField;

        private bool entityidFieldSpecified;

        private int entitytypeField;

        private bool entitytypeFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filename
        {
            get
            {
                return this.filenameField;
            }
            set
            {
                this.filenameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filedata
        {
            get
            {
                return this.filedataField;
            }
            set
            {
                this.filedataField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filetype
        {
            get
            {
                return this.filetypeField;
            }
            set
            {
                this.filetypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long fileid
        {
            get
            {
                return this.fileidField;
            }
            set
            {
                this.fileidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fileidSpecified
        {
            get
            {
                return this.fileidFieldSpecified;
            }
            set
            {
                this.fileidFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long entityid
        {
            get
            {
                return this.entityidField;
            }
            set
            {
                this.entityidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool entityidSpecified
        {
            get
            {
                return this.entityidFieldSpecified;
            }
            set
            {
                this.entityidFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int entitytype
        {
            get
            {
                return this.entitytypeField;
            }
            set
            {
                this.entitytypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool entitytypeSpecified
        {
            get
            {
                return this.entitytypeFieldSpecified;
            }
            set
            {
                this.entitytypeFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class UserRoleType
    {

        private long useridField;

        private string roleField;

        private int actionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long userid
        {
            get
            {
                return this.useridField;
            }
            set
            {
                this.useridField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string role
        {
            get
            {
                return this.roleField;
            }
            set
            {
                this.roleField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class ContactRoleType
    {

        private long contactidField;

        private int roleidField;

        private bool showonjobField;

        private int actionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long contactid
        {
            get
            {
                return this.contactidField;
            }
            set
            {
                this.contactidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int roleid
        {
            get
            {
                return this.roleidField;
            }
            set
            {
                this.roleidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool showonjob
        {
            get
            {
                return this.showonjobField;
            }
            set
            {
                this.showonjobField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class ContactAddressType
    {

        private int addressidField;

        private bool addressidFieldSpecified;

        private bool defaultField;

        private string address1Field;

        private string address2Field;

        private string cityField;

        private string stateField;

        private string zipcodeField;

        private string countryField;

        private string labelField;

        private int actionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int addressid
        {
            get
            {
                return this.addressidField;
            }
            set
            {
                this.addressidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool addressidSpecified
        {
            get
            {
                return this.addressidFieldSpecified;
            }
            set
            {
                this.addressidFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool @default
        {
            get
            {
                return this.defaultField;
            }
            set
            {
                this.defaultField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string address1
        {
            get
            {
                return this.address1Field;
            }
            set
            {
                this.address1Field = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string address2
        {
            get
            {
                return this.address2Field;
            }
            set
            {
                this.address2Field = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string city
        {
            get
            {
                return this.cityField;
            }
            set
            {
                this.cityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string zipcode
        {
            get
            {
                return this.zipcodeField;
            }
            set
            {
                this.zipcodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string country
        {
            get
            {
                return this.countryField;
            }
            set
            {
                this.countryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class PhoneType
    {

        private string phoneField;

        private string extField;

        private string typeField;

        private int actionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string phone
        {
            get
            {
                return this.phoneField;
            }
            set
            {
                this.phoneField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ext
        {
            get
            {
                return this.extField;
            }
            set
            {
                this.extField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class FinancialsType
    {

        private ShowOnInvoiceType showoninvoiceField;

        private bool showoninvoiceFieldSpecified;

        private GroupInvoiceByType groupinvoicebyField;

        private bool groupinvoicebyFieldSpecified;

        private long paymenttermsField;

        private bool paymenttermsFieldSpecified;

        private TimeSheetEntryFormatType timesheetentryformatField;

        private bool timesheetentryformatFieldSpecified;

        private FrequencyType frequencyField;

        private bool frequencyFieldSpecified;

        private WeekendingType weekendingField;

        private bool weekendingFieldSpecified;

        private double hoursField;

        private bool hoursFieldSpecified;

        private BillingUnitType billingunitField;

        private bool billingunitFieldSpecified;

        private string invoicecommentField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ShowOnInvoiceType showoninvoice
        {
            get
            {
                return this.showoninvoiceField;
            }
            set
            {
                this.showoninvoiceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool showoninvoiceSpecified
        {
            get
            {
                return this.showoninvoiceFieldSpecified;
            }
            set
            {
                this.showoninvoiceFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GroupInvoiceByType groupinvoiceby
        {
            get
            {
                return this.groupinvoicebyField;
            }
            set
            {
                this.groupinvoicebyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool groupinvoicebySpecified
        {
            get
            {
                return this.groupinvoicebyFieldSpecified;
            }
            set
            {
                this.groupinvoicebyFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long paymentterms
        {
            get
            {
                return this.paymenttermsField;
            }
            set
            {
                this.paymenttermsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool paymenttermsSpecified
        {
            get
            {
                return this.paymenttermsFieldSpecified;
            }
            set
            {
                this.paymenttermsFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TimeSheetEntryFormatType timesheetentryformat
        {
            get
            {
                return this.timesheetentryformatField;
            }
            set
            {
                this.timesheetentryformatField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timesheetentryformatSpecified
        {
            get
            {
                return this.timesheetentryformatFieldSpecified;
            }
            set
            {
                this.timesheetentryformatFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FrequencyType frequency
        {
            get
            {
                return this.frequencyField;
            }
            set
            {
                this.frequencyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool frequencySpecified
        {
            get
            {
                return this.frequencyFieldSpecified;
            }
            set
            {
                this.frequencyFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public WeekendingType weekending
        {
            get
            {
                return this.weekendingField;
            }
            set
            {
                this.weekendingField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool weekendingSpecified
        {
            get
            {
                return this.weekendingFieldSpecified;
            }
            set
            {
                this.weekendingFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double hours
        {
            get
            {
                return this.hoursField;
            }
            set
            {
                this.hoursField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hoursSpecified
        {
            get
            {
                return this.hoursFieldSpecified;
            }
            set
            {
                this.hoursFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BillingUnitType billingunit
        {
            get
            {
                return this.billingunitField;
            }
            set
            {
                this.billingunitField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool billingunitSpecified
        {
            get
            {
                return this.billingunitFieldSpecified;
            }
            set
            {
                this.billingunitFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string invoicecomment
        {
            get
            {
                return this.invoicecommentField;
            }
            set
            {
                this.invoicecommentField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public enum ShowOnInvoiceType
    {

        /// <remarks/>
        RESET,

        /// <remarks/>
        ADDRESS,

        /// <remarks/>
        EMAIL,

        /// <remarks/>
        DO_NOT_SEND,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public enum GroupInvoiceByType
    {

        /// <remarks/>
        RESET,

        /// <remarks/>
        JOB,

        /// <remarks/>
        COMPANY,

        /// <remarks/>
        PO_NUMBER,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public enum TimeSheetEntryFormatType
    {

        /// <remarks/>
        RESET,

        /// <remarks/>
        MINUTE,

        /// <remarks/>
        QUARTER,

        /// <remarks/>
        TIME_IN_TIME_OUT,

        /// <remarks/>
        DEFAULT_WHEN_BILLING_UNIT_IS_DAILY,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public enum FrequencyType
    {

        /// <remarks/>
        RESET,

        /// <remarks/>
        BI_WEEKLY,

        /// <remarks/>
        MONTHLY,

        /// <remarks/>
        SEMI_MONTHLY,

        /// <remarks/>
        WEEKLY,

        /// <remarks/>
        WHOLE_PROJECT,

        /// <remarks/>
        MONTHLY_ENDING_WEEKEND,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public enum WeekendingType
    {

        /// <remarks/>
        RESET,

        /// <remarks/>
        SATURDAY,

        /// <remarks/>
        SUNDAY,

        /// <remarks/>
        MONDAY,

        /// <remarks/>
        TUESDAY,

        /// <remarks/>
        WEDNESDAY,

        /// <remarks/>
        THURSDAY,

        /// <remarks/>
        FRIDAY,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public enum BillingUnitType
    {

        /// <remarks/>
        RESET,

        /// <remarks/>
        HOURLY,

        /// <remarks/>
        DAILY_BASED_ON_HOURS,

        /// <remarks/>
        DAILY_HALF_DAY,

        /// <remarks/>
        DAILY_HALF_DAY_OT,

        /// <remarks/>
        DAILY_BILL_WHOLE_DAY,

        /// <remarks/>
        DAILY_BILL_WHOLE_DAY_OT,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class UserfieldsType
    {

        private int userfieldidField;

        private string userfieldvalueField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int userfieldid
        {
            get
            {
                return this.userfieldidField;
            }
            set
            {
                this.userfieldidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string userfieldvalue
        {
            get
            {
                return this.userfieldvalueField;
            }
            set
            {
                this.userfieldvalueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class CompanyAddressType
    {

        private int addressidField;

        private bool addressidFieldSpecified;

        private bool defaultField;

        private string address1Field;

        private string address2Field;

        private string cityField;

        private string stateField;

        private string countryField;

        private string zipcodeField;

        private string phoneField;

        private string faxField;

        private string emailField;

        private string urlField;

        private int actionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int addressid
        {
            get
            {
                return this.addressidField;
            }
            set
            {
                this.addressidField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool addressidSpecified
        {
            get
            {
                return this.addressidFieldSpecified;
            }
            set
            {
                this.addressidFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool @default
        {
            get
            {
                return this.defaultField;
            }
            set
            {
                this.defaultField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string address1
        {
            get
            {
                return this.address1Field;
            }
            set
            {
                this.address1Field = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string address2
        {
            get
            {
                return this.address2Field;
            }
            set
            {
                this.address2Field = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string city
        {
            get
            {
                return this.cityField;
            }
            set
            {
                this.cityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string country
        {
            get
            {
                return this.countryField;
            }
            set
            {
                this.countryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string zipcode
        {
            get
            {
                return this.zipcodeField;
            }
            set
            {
                this.zipcodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string phone
        {
            get
            {
                return this.phoneField;
            }
            set
            {
                this.phoneField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fax
        {
            get
            {
                return this.faxField;
            }
            set
            {
                this.faxField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string email
        {
            get
            {
                return this.emailField;
            }
            set
            {
                this.emailField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ws.jobdiva.com/JobDivaAPI/")]
    public partial class OwnerType
    {

        private long owneridField;

        private bool owneridFieldSpecified;

        private string firstnameField;

        private string lastnameField;

        private bool primaryField;

        private int actionField;

        private bool actionFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ownerid
        {
            get
            {
                return this.owneridField;
            }
            set
            {
                this.owneridField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool owneridSpecified
        {
            get
            {
                return this.owneridFieldSpecified;
            }
            set
            {
                this.owneridFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string firstname
        {
            get
            {
                return this.firstnameField;
            }
            set
            {
                this.firstnameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string lastname
        {
            get
            {
                return this.lastnameField;
            }
            set
            {
                this.lastnameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                this.primaryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionSpecified
        {
            get
            {
                return this.actionFieldSpecified;
            }
            set
            {
                this.actionFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void searchCompanyCompletedEventHandler(object sender, searchCompanyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal searchCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public DataSet data
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DataSet)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createCompanyCompletedEventHandler(object sender, createCompanyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public long companyid
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool companyidSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateCompanyCompletedEventHandler(object sender, updateCompanyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void searchContactCompletedEventHandler(object sender, searchContactCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal searchContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public DataSet data
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DataSet)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createContactCompletedEventHandler(object sender, createContactCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public long contactid
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool contactidSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateContactCompletedEventHandler(object sender, updateContactCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createContactNoteCompletedEventHandler(object sender, createContactNoteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createContactNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createContactNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void searchJobCompletedEventHandler(object sender, searchJobCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal searchJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public DataSet data
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DataSet)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createJobCompletedEventHandler(object sender, createJobCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public long jobid
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool jobidSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateJobCompletedEventHandler(object sender, updateJobCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createJobNoteCompletedEventHandler(object sender, createJobNoteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createJobNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createJobNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void searchCandidateProfileCompletedEventHandler(object sender, searchCandidateProfileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchCandidateProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal searchCandidateProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public DataSet data
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DataSet)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createCandidateCompletedEventHandler(object sender, createCandidateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCandidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createCandidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public long candidateid
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool candidateidSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateCandidateProfileCompletedEventHandler(object sender, updateCandidateProfileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCandidateProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateCandidateProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateCandidateUserfieldsCompletedEventHandler(object sender, updateCandidateUserfieldsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCandidateUserfieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateCandidateUserfieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateCandidateQualificationsCompletedEventHandler(object sender, updateCandidateQualificationsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCandidateQualificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateCandidateQualificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateCandidateAvailabilityCompletedEventHandler(object sender, updateCandidateAvailabilityCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCandidateAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateCandidateAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateCandidateEmailMergeCompletedEventHandler(object sender, updateCandidateEmailMergeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCandidateEmailMergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateCandidateEmailMergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createCandidateNoteCompletedEventHandler(object sender, createCandidateNoteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCandidateNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createCandidateNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createCandidateReferenceCompletedEventHandler(object sender, createCandidateReferenceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCandidateReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createCandidateReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void searchStartCompletedEventHandler(object sender, searchStartCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal searchStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public DataSet data
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DataSet)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateStartCompletedEventHandler(object sender, updateStartCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void saveTimeSheetCompletedEventHandler(object sender, saveTimeSheetCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveTimeSheetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal saveTimeSheetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createBillingRecordCompletedEventHandler(object sender, createBillingRecordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createBillingRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createBillingRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public int recID
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool recIDSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createPayRecordCompletedEventHandler(object sender, createPayRecordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createPayRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createPayRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public int recID
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool recIDSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateBillingRecordCompletedEventHandler(object sender, updateBillingRecordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateBillingRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateBillingRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updatePayRecordCompletedEventHandler(object sender, updatePayRecordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updatePayRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updatePayRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void uploadResumeCompletedEventHandler(object sender, uploadResumeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal uploadResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public long candidateid
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }

        /// <remarks/>
        public bool candidateidSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createJobApplicationCompletedEventHandler(object sender, createJobApplicationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createJobApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createJobApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void createSubmittalCompletedEventHandler(object sender, createSubmittalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createSubmittalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal createSubmittalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public long submittalid
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }

        /// <remarks/>
        public bool submittalidSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void searchSubmittalCompletedEventHandler(object sender, searchSubmittalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchSubmittalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal searchSubmittalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public DataSet data
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DataSet)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateSubmittalCompletedEventHandler(object sender, updateSubmittalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSubmittalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateSubmittalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591